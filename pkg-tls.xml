<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>

<!-- <Package name="TLS" repo-name="tls" pp-version="1.1"  -->
<Package name="TLS"
    xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"
    xmlns:h="http://www.w3.org/1999/xhtml"
    >
  <!-- <inline-comment color='green'> Hello World TLS </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World TLS </inline-comment> -->
  <PPReference>
    <ReferenceTable>
      <PPTitle>Functional Package for Transport Layer Security (TLS)</PPTitle>
      <PPVersion>2.0-draft</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2022-08-24</PPPubDate>
      <Keywords>TLS</Keywords>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory>
    <entry>
      <version>1.0</version>
      <date>2018-12-17</date>
      <subject>First publication</subject>
    </entry>
    <entry>
      <version>1.1</version>
      <date>2019-03-01</date>
      <subject>Clarifications regarding override for invalid certificates,
      renegotiation_info extension, DTLS versions, and named Diffie-Hellman groups in DTLS
      contexts</subject>
    </entry>
     <entry>
      <version>2.0</version>
      <date>2022-08-24</date>
      <subject>Added audit events, added TLS 1.3 support, deprecated TLS 1.0 and 1.1, updated algorithms/ciphersuites in accordance with CNSA suite RFC and to consider PSK, restructured SFRs for clarity</subject>
    </entry>

	  
  </RevisionHistory>
	
  <!-- PP-style preferences   -->
  <pp-preferences>
<!--        <pp-pref name="display-audit-with-sfrs">0</pp-pref> -->
   	<audit-events-in-sfrs/>
  </pp-preferences>

  <sec:Introduction>
    <sec:Overview>
      <h:p>      
	  Transport Layer Security (TLS) and the closely-related Datagram TLS (DTLS) are
    cryptographic protocols designed to provide communications security over IP networks.
    Several versions of the protocol are in widespread use in software that provides functionality
    such as web browsing, email, instant messaging, and voice-over-IP (VoIP).
    Major websites use TLS to protect communications to and from their servers.
    TLS is also used to protect communications between
    hosts and network infrastructure devices for administration.
    The underlying platform, such as an operating system, often provides the
    actual TLS implementation.
    The primary goal of the TLS protocol is to
    provide confidentiality and integrity of data transmitted
    between two communicating endpoints, as well as authentication of at least
    the server endpoint.
    </h:p><h:p>
	  TLS supports many different methods for exchanging keys, encrypting data,
	  and authenticating message integrity. These methods are dynamically negotiated
    between the client and server when the TLS connection is established.
    As a result, evaluating the implementation of both endpoints is typically
    necessary to provide assurance for the operating environment.
    </h:p><h:p>
	  This "Functional Package for Transport Layer Security" (short name "TLS-PKG")
    defines functional requirements for the implementation of the TLS
    and DTLS protocols. The requirements are
    intended to improve the security of products by enabling their evaluation.
  </h:p>
    </sec:Overview>
    <tech-terms>
      <term abbr="AES" full="Advanced Encryption Standard"/>
      <term abbr="CA" full="Certificate Authority">
	      Issuer of digital certificates.
      </term>
      <term abbr="CBC" full="Cipher Block Chaining"/>
      <term abbr="CN" full="Common Name"/>
      <term abbr="DHE" full="Diffie-Hellman Ephemeral"/>
      <term abbr="DN" full="Distinguished Name"/>
      <term abbr="DNS" full="Domain Name Server"/>
      <term abbr="DTLS" full="Datagram Transport Layer Security">
	      Cryptographic network protocol, based on TLS, which provides
              communications security for datagram protocols.
	    </term>
      <term abbr="EAP" full="Extensible Authentication Protocol"/>
      <term abbr="ECDHE" full="Elliptic Curve Diffie-Hellman Ephemeral"/>
      <term abbr="ECDSA" full="Elliptic Curve Digital Signature Algorithm"/>
      <term abbr="GCM" full="Galois/Counter Mode"/>
      <term abbr="HTTP" full="Hypertext Transfer Protocol"/>
      <term abbr="IETF" full="Internet Engineering Task Force"/>
      <term abbr="IP" full="Internet Protocol"/>
      <!-- <term abbr="LDAP" full="Lightweight Directory Access Protocol"/>  -->
      <term abbr="NIST" full="National Institute of Standards and Technology"/>
      <term abbr="RFC" full="Request for Comment (IETF)"/>
      <term abbr="RSA" full="Rivest Shamir Adelman"/>
      <term abbr="SAN" full="Subject Alternative Name"/>
      <term abbr="SCSV" full="Signaling ciphersuite Value"/>
      <term abbr="SHA" full="Secure Hash Algorithm"/>
      <!-- <term abbr="SIP" full="Session Initiation Protocol"/> -->
      <term abbr="TCP" full="Transmission Control Protocol"/>
      <term abbr="TLS" full="Transport Layer Security">
        Cryptographic network protocol for providing communications
        security over a TCP/IP network.
      </term>
      <term abbr="UDP" full="User Datagram Protocol"/>
      <term abbr="URI" full="Uniform Resource Identifier"/>
      <term abbr="URL" full="Uniform Resource Locator"/>
    </tech-terms>

    <sec:Compliant_Targets_of_Evaluation>
      <h:p>
      The Target of Evaluation
      (TOE) in this Package is a product which acts as a (D)TLS client, a (D)TLS server, or both.
      This Package describes the security functionality of TLS and DTLS in terms of   <xref g="CC" />. 
      </h:p><h:p>
      The contents of this Package must be appropriately
      combined with a PP or PP-Module.
      When this Package is instantiated by a PP or PP-Module, the Package must
      include selection-based requirements in accordance with the
      selections or assignments indicated in the PP or PP-Module.  These may be expanded by the
      the ST author.
      </h:p><h:p>
      The PP or PP-Module which instantiates this Package must typically include
      the following components in order to satisfy dependencies of this Package. It is the responsibility
      of the PP or PP-Module author who instantiates this Package to ensure that dependence
      on these components is satisfied:<h:br/>
      <componentsneeded>
        <componentneeded>
          <componentid>FCS_CKM.1</componentid>
          <notes>To support TLS ciphersuites that use RSA, DHE or ECDHE for key exchange, the PP or PP-Module must
            include FCS_CKM.1 and specify the corresponding key generation algorithm.</notes>
        </componentneeded>
      <componentneeded>
        <componentid>FCS_CKM.2</componentid>
        <notes>To support TLS ciphersuites that use RSA, DHE or ECDHE for key exchange, the PP or PP-Module must
          include FCS_CKM.2 and specify the corresponding algorithm.</notes>
      </componentneeded>
      <componentneeded>
        <componentid>FCS_COP.1</componentid>
        <notes>To support TLS ciphersuites that use AES for encryption and decryption, the PP or PP-Module
          must include FCS_COP.1 (iterating as needed) and specify AES with corresponding key sizes and modes. To
          support TLS ciphersuites that use SHA for hashing, the PP or PP-Module must include FCS_COP.1
          (iterating as needed) and specify SHA with corresponding digest sizes.
        </notes>
      </componentneeded>
      <!-- The components in the PP or PP-Module that need this SFR should require it;
      it is not _directly_ depended upon by this Package.-->
      <componentneeded>
        <componentid>FCS_RBG_EXT.1</componentid>
        <notes>To support random bit generation needed for the TLS handshake,
          the PP or PP-Module must include FCS_RBG_EXT.1.</notes>
      </componentneeded>
      <componentneeded>
        <componentid>FIA_X509_EXT.1</componentid>
        <notes>
          To support validation of certificates needed during TLS connection setup,
          the PP or PP-Module must include FIA_X509_EXT.1.
        </notes>
      </componentneeded>
      <componentneeded>
        <componentid>FIA_X509_EXT.2</componentid>
        <notes>To support the use of X509 certificates for authentication in TLS connection setup,
          the PP or PP-Module must include FIA_X509_EXT.2.
          </notes>
      </componentneeded>
    </componentsneeded>
    </h:p><h:p>
      An ST must identify the applicable version of the PP or
      PP-Module and this Package in its conformance claims.
      </h:p>
      
    </sec:Compliant_Targets_of_Evaluation>

  </sec:Introduction>
  <sec:Conformance_Claims>
    <cclaims>
      <cclaim name="Conformance Statement">
        <description>
	  <h:p>
	    This Package serves to provide Protection Profiles with additional 
          SFRs and associated Evaluation Activities specific to TLS clients and servers.  
          </h:p><h:p>
          This Package conforms to Common Criteria
          <xref g="CC" /> for Information Technology Security Evaluation, Version 3.1,
          Revision 5. It is CC Part 2 extended conformant.
          </h:p><h:p>
          In accordance with CC Part 1, dependencies are not included when they are addressed
          by other SFRs. The evaluation activities provide adequate proof that any dependencies are
          also satisfied.</h:p></description>
      </cclaim>
    </cclaims>
  </sec:Conformance_Claims>
  
  <sec:Security_Functional_Requirements>
 <!--   This chapter describes the security requirements
    to be fulfilled by the product. Those requirements comprise functional components from Part 2 of
    <xref to="bibCC" />. The following notations are used:
    <h:ul>
      <h:li>
        <h:b>Selection</h:b> (denoted by
        <h:i>italicized text</h:i>): is used to select one or more options provided by the [CC] in stating
        a requirement.</h:li>
      <h:li>
        <h:b>Assignment</h:b> operation (denoted by
        <h:span class="assignable-content">italicized text</h:span>): is used to assign a specific 
        value to an unspecified parameter, such
        as the length of a password. Showing the value in square brackets indicates assignment.</h:li>
      <h:li>
        <h:b>Iteration</h:b> operation: are identified with a number inside parentheses (e.g. "(1)").</h:li>
    </h:ul> 
    <section title="Security Functional Requirements" id="SFRs">The Security Functional Requirements
      included in this section are derived from Part 2 of the Common Criteria for Information
      Technology Security Evaluation, Version 3.1, Revision 5, with additional extended functional
      components.-->
	  
 <sec:Auditable_Events_for_Mandatory_SFRs>
   <h:p>
     The auditable events specified in this Functional Package are included in a Security Target 
     if the incorporating PP or PP-Module supports audit event reporting through FAU_GEN.1 and all other criteria in the incorporating
     PP or PP-Module are met.
   </h:p>
   <audit-table table="mandatory" id="t-audit-mandatory"/>

 </sec:Auditable_Events_for_Mandatory_SFRs>
      <section title="Cryptographic Support (FCS)" id="fcs">
        <f-component cc-id="fcs_tls_ext.1" name="TLS Protocol">
          <f-element id="fel-tls-usage">
			<title>The TSF shall implement
        <selectables linebreak="yes">
          <selectable id="tlsc_impl">TLS as a client</selectable>
          <selectable id="tlss_impl">TLS as a server</selectable>
          <selectable id="dtlsc_impl">DTLS as a client</selectable>
          <selectable id="dtlss_impl">DTLS as a server</selectable></selectables>.
        </title>
        <note role="application">
              If <h:i>TLS as a client</h:i> is selected, then the
              ST must include the requirements from FCS_TLSC_EXT.1.
              <h:br/>
              If <h:i>TLS as a server</h:i> is selected, then the
              ST must include the requirements from FCS_TLSS_EXT.1.
              <h:br/><h:br/>
              If <h:i>DTLS as a client</h:i> is selected, then the
              ST must include the requirements from FCS_DTLSC_EXT.1.
              <h:br/>
              If <h:i>DTLS as a server</h:i> is selected, then the
              ST must include the requirements from FCS_DTLSS_EXT.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall examine the TSS to verify that the TLS and DTLS claims are consistent with those selected in the SFR.<h:p/>
              </TSS>
	      <Guidance>
		The evaluator shall ensure that the selections indicated in the ST are
		consistent with selections in the dependent components.<h:p/>
	      </Guidance>
              <Tests>
                
                There are no test activities for this SFR; the following information is provided as an overview of the expected functionality and test environment for all subsequent SFRs.
                <h:p/>
                <figure entity="images/figure1.png" title="TLS Hello" id="Hello"/>
                <h:p/>
                The chart above provides an overview of the TLS hello messages, 
                the content and protections, and the establishment of cryptographic keys in support of the protections.
                <h:ul>
                  <h:li>Blue text indicates a message or content unique to TLS 1.2.</h:li> 
                  <h:li>Green text indicates uniqueness to TLS 1.3.</h:li> 
                  <h:li>Black text indicates features common to both TLS 1.2 and TLS 1.3.</h:li> 
                  <h:li>Bold text indicates mandatory features.</h:li>
                  <h:li>Italics emphasizes optional features. </h:li>
                  <h:li>A shaded text box indicates that the message is encrypted for TLS 1.2 (blue), TLS 1.3 (green) or both TLS 1.2 and TLS 1.3 (grey).</h:li> 
                  <h:li>An outlined text box indicates that the content in the message is signed, and/or provides authentication of the handshake to that point.</h:li>
                </h:ul>
                <h:p/>
                <h:b>Test Environment:</h:b>
                <h:p/>
                Tests for TLS 1.2 and TLS 1.3 include examination of the handshake messages and behavior of the TSF when presented with unexpected or invalid messages. 
                For TLS 1.2 and below, previous versions of this Functional Package only required visibility of network traffic and the ability to modify a valid handshake message sent to the TSF.
                <h:p/>
                <figure entity="images/figure2.png" title="Test environment for TLS 1.2 using network traffic visibility and control tools" id="Figure2"/>
                <h:p/>
                TLS 1.3 introduces the encryption of handshake messages subsequent to the server hello exchange which prevents visibility and control using midpoint capabilities. 
                To achieve equivalent validation of TLS 1.3 requires the ability to modify the traffic underlying the encryption applied after the server hello message. 
                This can be achieved by introducing additional control of the messages sent, and visibility of messages received by the test TLS client, 
                when validating TLS server functionality or test server, when validating TLS client functionality.
                <h:p/>
                <figure entity="images/figure3.png" title="Test environment for TLS 1.3 using custom endpoint capabilities for visibility and control" id="Figure3"/>
                <h:p/>
                Typically, a compliant TLS 1.3 library modified to provide visibility and control of the handshake messages prior to encryption suffices for all tests. 
                Such modification will require the test client and/or server to be validated. 
                <h:p/>
                Since validations of products supporting only TLS 1.2 are still expected under this Package, 
                the test environment for TLS 1.2-only validations may include network sniffers and man-in-the-middle products that do not require such modifications to a compliant TLS 1.2 library. 
                For consistency, a compliant TLS client (or TLS server) together with the network sniffers and man-in-the-middle capabilities 
                will also be referred to as a test TLS client (or test TLS server, respectively) in the following evaluation activities.
                <h:p/>
                <figure entity="images/figure4.png" title="Combined test environment for TLS 1.2 and TLS 1.3 using both network tools and custom endpoint capabilities" id="Figure4"/>
                 
              </Tests>
            </aactivity>
          </f-element>
	  <audit-event />
        </f-component>

        <f-component cc-id="fcs_tlsc_ext.1" name="TLS Client Protocol" status="sel-based">
		  <depends on-sel="tlsc_impl"/>
          <f-element id="fel-client">
            <title> The TSF shall implement TLS 1.2 (RFC 5246) and
              <selectables>
                <selectable>TLS 1.3 (RFC 8446)</selectable>
                <selectable exclusive='yes'>no other TLS version</selectable>
              </selectables> as a client that supports additional functionality for session renegotiation protection and
              <selectables linebreak="yes">
                <selectable id="tlsc_mutual_auth">mutual authentication</selectable>
                <selectable id="tlsc_downgrade_protection">supplemental downgrade protection</selectable>
                <selectable id="tlsc_resumption">session resumption</selectable>
                <selectable>no optional functionality</selectable></selectables>
              and shall abort attempts by a server to negotiate all other TLS or SSL versions. 
            </title>
            <note role="application">
              Session renegotiation protection is required for both TLS 1.2 and TLS 1.3, and the ST must include the requirements from FCS_TLSC_EXT.4. Within FCS_TLSC_EXT.4, 
              options for implementation of secure session renegotiation for TLS 1.2, or rejecting renegotiation requests are claimed.  
              <h:p/>
              The ST author will claim TLS 1.3 functionality if supported, and optional functionality as appropriate for the claimed versions. 
              <h:p/>
              If "mutual authentication" is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.2. If the TOE implements mutual authentication, this selection must be made.
              <h:p/>
              If "supplemental downgrade protection" is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.3. This is claimed if TLS 1.3 is supported, or if the product supports TLS 1.1 or below downgrade protection using the mechanism described in RFC 8446.
              <h:p/>
              If "session resumption" is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.5.  
            </note>
          </f-element>
          <f-element>
            <title>
              The TSF shall be able to support the following TLS 1.2 ciphersuites:
          <selectables linebreak="yes">
            <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289, RFC 8422</selectable>
            <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289, RFC 8422</selectable>
            <selectable>TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
            <selectable>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
            <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
            <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
            <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
            <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
            <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
            <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
            <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
            <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
            <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
            <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
            <selectable>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
            <selectable>PP-specific ciphersuites using pre-shared secrets including <selectables linebreak="yes">
              <selectable>TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442</selectable>
              <selectable>TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487</selectable>
              <selectable>TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487</selectable>
              <selectable>TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442</selectable>
              <selectable>TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487</selectable>
              <selectable>TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487</selectable></selectables></selectable>
            <selectable>the following TLS 1.3 ciphersuites: <selectables linebreak="yes">
              <selectable>TLS_AES_256_GCM_SHA384 as defined in RFC 8446</selectable>
              <selectable>TLS_AES_128_GCM_SHA256 as defined in RFC 8446</selectable>
              <selectable><assignable>other TLS 1.3 ciphersuites]</assignable></selectable></selectables></selectable></selectables>
              offering the supported ciphersuites in a client hello message in preference order: 
              <assignable>list of supported ciphersuites</assignable>.
          </title>
            <note role="application">
              The ST author should select the ciphersuites that are supported, and must select at least one ciphersuite for each TLS version supported. 
              The ciphersuites to be tested in the evaluated configuration are limited by this requirement. 
              However, this requirement does not restrict the TOE's ability to propose additional non-deprecated ciphersuites beyond the ones listed in this requirement 
              in its Client Hello message as indicated in the ST. 
              That is, the TOE may propose any ciphersuite not excluded by this element, 
              but the evaluation will only test ciphersuites from the above list. 
              It is necessary to limit the ciphersuites that can be used in an evaluated configuration administratively on the server in the test environment. 
              <h:p/>
              TLS 1.3 ciphersuites are claimed if support for TLS 1.3 is claimed in FCS_TLSC_EXT.1.1. 
              The assignment of preference order provides an ordered list of all supported ciphersuites with the most preferred ciphersuites listed first. 
              Ciphersuites listed in [RFC 9151, “CNSA Suite TLS Profile”] are preferred over all other ciphersuites, 
              GCM ciphersuites are preferred over CBC ciphersuites, ECDHE preferred over RSA and DHE, and SHA256 or SHA384 over SHA1. 
              <h:p/>
              Ciphersuites for TLS 1.2 are of the form TLS_{key exchange algorithm}_WITH_{encryption algorithm}_(message digest algorithm}, and are listed in the TLS parameters section of the internet assignments at iana.org. 
            </note>
          </f-element>
          <f-element>
          <title>
            The TSF shall not offer the following ciphersuites indicating the following: 
            <h:ul>
              <h:li>the null encryption component</h:li>
              <h:li>support for anonymous servers</h:li>
              <h:li>use of deprecated or export-grade cryptography including DES, 3DES, RC2, RC4, or IDEA for encryption</h:li>
              <h:li>use of MD</h:li>
            </h:ul> and shall abort sessions where a server attempts to negotiate ciphersuites not enumerated in the client hello message.
          </title>
          </f-element>
          <f-element>
         <title>
           The TSF shall be able to support the following TLS client hello message extensions: 
           <h:ul>
             <h:li>signature_algorithms extension (RFC 8446) indicating support for 
               <selectables linebreak="yes">
                 <selectable>ecdsa-secp384r1_sha384 (RFC 8446)</selectable>
                 <selectable>rsa_psks1_sha384 (RFC 8446)</selectable></selectables>, and <selectables linebreak="yes">
                   <selectable>rsa_pss_pss_sha384 (RFC 8603)</selectable>
                   <selectable>rsa_pss_rsae_sha384 (RFC 8603)</selectable>
                   <selectable><assignable>other non-deprecated signature algorithms</assignable></selectable>
                   <selectable>no other signature algorithms</selectable></selectables>
             </h:li>
             <h:li>
               extended_master_secret extension (RFC 7627) enforcing server support
             </h:li>
             <h:li>
               the following other extensions: <selectables linebreak="yes">
                 <selectable>signature_algorithms_cert extension (RFC 8446) indicating support for <selectables linebreak="yes">
                   <selectable>ecdsa-secp384r1_sha384 (RFC 8446)</selectable>
                   <selectable>rsk_psks1_sha384 (RFC 8446)</selectable></selectables>, and <selectables linebreak="yes">
                     <selectable>rsa_pss_pss_sha384 (RFC 8603)</selectable>
                     <selectable>rsa_pss_rsae_sha384 (RFC 8603)</selectable>
                     <selectable>rsa_pkcs1_sha256 (RFC 8446)</selectable>
                     <selectable>rsa_pss_rsae_sha256 (RFC 8446)</selectable>
                     <selectable><assignable>other non-deprecated signature algorithms</assignable></selectable>
                     <selectable>no other signature algorithms</selectable>
                 </selectables></selectable>
                 <selectable>supported_versions extension (RFC 8446) indicating support for TLS 1.3</selectable>
                 <selectable>supported_groups extension (RFC 7919, RFC 8446) indicating support for <selectables linebreak="yes">
                   <selectable>secp256r1</selectable>
                   <selectable>secp384r1</selectable>
                   <selectable>secp521r1</selectable>
                   <selectable>ffdhe2048(256)</selectable>
                   <selectable>ffdhe3072(257)</selectable>
                   <selectable>ffdhe4096(258)</selectable>
                   <selectable>ffdhe6144(259)</selectable>
                   <selectable>ffdhe8192(260)</selectable></selectables></selectable>
                 <selectable>key_share extension (RFC 8446)</selectable>
                 <selectable>post_handshake_auth (RFC 8446), pre_shared_key (RFC 8446), and psk_key_exchange_mode (RFC 8446) indicating DHE or ECDHE mode</selectable>
                 <selectable>no other extensions</selectable></selectables>
               and shall not send the following extensions: <h:ul>
                 <h:li>early_data</h:li>
                 <h:li>psk_key_exchange_mode indicating PSK only mode.</h:li>
               </h:ul>
             </h:li>
           </h:ul>
         </title>
         <note role="application">
           If TLS 1.3 is claimed in FCS_TLSC_EXT.1.1, supported_versions, supported_groups, and key_share extensions are claimed in accordance with RFC 8446. 
           If TLS 1.3 is not claimed, supported_versions and key_share extensions are not claimed. 
           Other extensions may be supported; certain extensions may need to be claimed based on other SFR claims made.
           <h:p/>
           If ECDHE ciphersuites are claimed in FCS_TLSC_EXT.1.2, the supported_groups extension is claimed here with appropriate secp groups claimed. 
           If DHE ciphersuites are claimed in FCS_TLSC_EXT.1.2, it is preferred that the appropriate ffdhe groups be claimed here. 
           In a subsequent version of this FP, support for ffdhe groups will be required whenever DHE ciphersuites are claimed. 
           <h:p/>
           When ‘other non-deprecated signature algorithms’ is claimed, 
           the assignment will describe the standard signature and hash algorithms supported. 
           MD5 and SHA-1 hashes are deprecated and are not included in the signature_algorithms or signature_algorithms_cert extensions.
         </note>
          </f-element>
          <f-element>
            <title>
              The TSF shall be able to <selectables linebreak="yes">
              <selectable>verify that a presented identifier of name type: <selectables linebreak="yes">
                <selectable>DNS name type according to RFC 6125</selectable>
                <selectable>URN name type according to RFC 6125</selectable> 
                <selectable>SRV name type according to RFC 6125</selectable>
                <selectable>Common Name conversion to DNS name according to RFC 6125</selectable>
                <selectable>Directory name type according to RFC 5280</selectable>
                <selectable>IPaddress name type according to RFC 5280</selectable>
                <selectable>rfc822Name type according to RFC 5280</selectable>
                <selectable><assignable>other name type</assignable></selectable></selectables></selectable>  
              <selectable>interface with a client application requesting the TLS channel to verify that a presented identifier</selectable></selectables> 
              matches a reference identifier of the requested TLS server and shall abort the session if no match is found.
            </title>
            <note role="application">
              The rules for verification identity are described in Section 6 of RFC 6125 and Section 7 of RFC 5280. 
              The reference identifier is established by the user (e.g., entering a URL into a web browser or clicking a link), 
              by configuration (e.g., configuring the name of a mail server or authentication server), 
              or by an application (e.g., a parameter of an API) depending on the product service. 
              The client establishes all acceptable reference identifiers and interfaces with the TLS implementation to provide acceptable reference identifiers, 
              or to accept the presented identifiers as validated in the server’s certificate. 
              If the product performs matching of the reference identifiers to the identifiers provided in the server’s certificate, 
              the first option is claimed and all supported name types are claimed; if the product presents the certificate, 
              or the presented identifiers from the certificate to the application, the second option is claimed. 
              <h:p/>
              In most cases where TLS servers are represented by DNS-type names, 
              the preferred method for verification is the Subject Alternative Name using DNS names, URI names, or Service Names. 
              Verification using a conversion of the Common Name relative distinguished name from a DNS name type in the subject field is allowed for the purposes of backward compatibility. 
              <h:p/>
              Finally, the client should avoid constructing reference identifiers using wildcards. 
              However, if the presented identifiers include wildcards, the client must follow the best practices regarding matching; 
              these best practices are captured in the evaluation activity. Support for other name types is rare, but may be claimed for specific applications. 
              <h:p/><comment>[JF] App note talks about wildcards best practices being captured in the evaluation activity but nothing in the activity actually covers this.</comment>  
            </note>
          </f-element>
          <f-element>
            <title>
              The TSF shall not establish a trusted channel if the server certificate is invalid <selectables>
                <selectable>with no exceptions</selectable>
                <selectable>except when override is authorized in the case where valid revocation information is not available</selectable></selectables>. 
            </title>
            <note role="application">
              A certificate used in a manner that does not support revocation checking should not advertise revocation information locations. 
              Common methods to address this include revoking the issuing CA, 
              resetting certificate pinning mechanisms, or removing entries from trust stores. 
              Thus, a certificate that does not advertise revocation status information is considered to be not revoked and does not need to be processed via override mechanisms.  
              Override mechanisms are for use with certificates with published revocation status information that is not accessible, 
              whether temporarily or because the information cannot be accessed during the state of the TOE (e.g., for verifying signatures on boot code). 
              The circumstances should be described by the ST author, who should indicate the override mechanism and conditions that apply to the override, including system state, user/admin actions, etc. 
              <h:p/>
              This SFR is claimed if "TLS as a client" is selected in FCS_TLS_EXT.1.1.
            </note>
         
            <aactivity>
              <TSS>
                The evaluator shall check the description of the implementation of this protocol in the TSS to ensure the supported TLS versions, features, ciphersuites, and extensions 
                are specified in accordance with RFC 5246 (TLS 1.2) and RFC 8446 (TLS 1.3 and updates to TLS 1.2) and as refined in FCS_TLSC_EXT.1 as appropriate. 
                <h:p/>
                The evaluator shall verify that ciphersuites indicated in FCS_TLSC_EXT.1.2 are included in the description, and that none of the following ciphersuites are supported: ciphersuites indicating 
                'NULL,' 'RC2,' 'RC4,' 'DES,' 'IDEA,' or 'TDES' in the encryption algorithm component, indicating 'anon,' or indicating MD5 or SHA in the message digest algorithm component.
                <h:p/>
                The evaluator shall verify that the TLS implementation description includes the extensions as required in FCS_TLSC_EXT.1.4.
                <h:p/>
                The evaluator shall verify that the ST describes applications that use the TLS functions and how they establish reference identifiers.
                <h:p/>
                The evaluator shall verify that the ST includes a description of the name types parsed and matching methods supported for associating the server certificate to application defined reference identifiers.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall check the operational guidance to ensure that it contains instructions on configuring the product so that TLS conforms to the description in the TSS and that 
                it includes any instructions on configuring the version, ciphersuites, or optional extensions that are supported.
                <h:p/>
                The evaluator shall verify that all configurable features for matching identifiers in certificates presented in the TLS handshake to application specific reference identifiers are described.
                <h:p/>
	      </Guidance>
              <Tests>
		The evaluator shall perform the following tests:
              <testlist>
                <!-- Test 1 and sub-tests -->
                <test>
                  (supported configurations) For each supported version, and for each supported ciphersuite associated with the version:
                  <h:p/>
                  The evaluator shall establish a TLS connection between the TOE and a test TLS server that is configured to negotiate the tested version and ciphersuite in accordance with the RFC for the version.
                  <h:p/>
                  The evaluator shall observe that the TSF presents a client hello with the highest version of TLS 1.2 or the legacy version (value '03 03') 
                  and shall observe that the supported version extension is not included for TLS 1.2, and, if TLS 1.3 is supported, is present and contains the value '03 04' for TLS 1.3. 
                  <h:p/>
                  The evaluator shall observe that the client hello indicates the supported ciphersuites in the order indicated, 
                  and that it includes only the extensions supported, with appropriate values, for that version in accordance with the requirement.
                  <h:p/>
                  The evaluator shall observe that the TOE successfully completes the TLS handshake.
                  <h:p/>
                  <h:b>Note:</h:b> TOEs supporting TLS 1.3, but allowing a server to negotiate TLS 1.2, 
                  should include all ciphersuites and all extensions as required for either version. 
                  If such a TOE is configurable to support only TLS 1.2, only TLS 1.3, or both TLS 1.2 and TLS 1.3, Test 1 should be performed in each configuration – with advertised ciphersuites appropriate for the configuration.
                  <h:p/>
                  The connection in Test 1 may be established as part of the establishment of a higher-level protocol, e.g., as part of an EAP session. 
                  <h:p/>
                  It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; 
                  it is not necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used 
                  (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).
                  <h:p/>
                <h:p/></test>
                
                <!-- Test 2 and sub-tests -->
                <test>(obsolete versions) The evaluator shall perform the following tests:
                
                <testlist>
                  <test>For each of SSL version 3, TLS version 1.0, and TLS version 1.1, the evaluator shall initiate a TLS connection from the TOE 
                    to a test TLS server that is configured to negotiate the obsolete version and observe that the TSF terminates the connection.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., protocol version, insufficient security) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                  <h:p/></test>
                  <test>
                    The evaluator shall attempt to establish a connection with a test TLS server that is configured to send a server hello message indicating the selected version 
                    (referred to as the legacy version for TLS 1.3) with a value corresponding to an undefined TLS (legacy) version 
                    (e.g., '03 04') and observe that the TSF terminates the connection.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., protocol version) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                    <h:p/>
                    Test 2.2 is intended to test the TSF response to non-standard versions, 
                    including early proposals for ‘beta TLS 1.3’ versions. 
                    RFC 8446 requires the legacy version to have the value '03 03' and specifies TLS 1.3 in the supported versions extension with the value '03 04'. 
                    While not a preferred approach, if continued support for a beta TLS 1.3 version is desired and the TSF cannot be configured to reject such versions, 
                    another value (e.g., '03 05') can be used in Test 2.2. Implementations of non-standard versions are not tested.
                  <h:p/></test>
                </testlist>
                <h:p/></test>
                
                <!-- Test 3 and sub-tests -->
                <test>
                  (ciphersuites)  The evaluator shall perform the following tests on handling unexpected ciphersuites using a test TLS server 
                  sending handshake messages compliant with the negotiated version except as indicated in the test: 
                  <testlist>
                    <test>(ciphersuite not offered) For each supported version, the evaluator shall attempt to establish a connection with a test TLS server configured to negotiate the supported version and a ciphersuite 
                      not included in the client hello and observe that the TOE rejects the connection.
                    <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                      <h:p/>
                      This test intended to test the TSF’s generic ability to recognize non-offered ciphersuites. 
                      If the ciphersuites in the client hello are configurable, 
                      the evaluator shall configure the TSF to offer a ciphersuite outside those that are supported and use that ciphersuite in the test. 
                      If the TSF ciphersuite list is not configurable, it is acceptable to use a named ciphersuite from the IANA TLS protocols associated with the tested version. 
                      Additional special cases of this test for special ciphersuites are performed separately.
                    <h:p/></test>
                    <test>(version confusion) For each supported version, 
                      the evaluator shall attempt to establish a connection with a test TLS server that is configured to negotiate the supported version 
                      and a ciphersuite that is not associated with that version and observe that the TOE rejects the connection.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                      <h:p/>
                      It is intended that Test 3.2 use TLS 1.3 ciphersuites for a server negotiating TLS 1.2.  
                      If TLS 1.3 is supported, the test server negotiating TLS 1.3 should select a TLS 1.2 ciphersuite supported by the TOE for TLS 1.2 
                      and matching the client’s supported groups and signature algorithm indicated by extensions in the TLS 1.3 client hello. 
                      If the TOE is configurable to allow both TLS 1.2 and TLS 1.3 servers, the test server should use ciphersuites offered by the TSF in its client hello message.
                    <h:p/></test>
                    <test>(null ciphersuite) For each supported version, the evaluator shall attempt to establish a connection with a test TLS server 
                      configured to negotiate the null ciphersuite (TLS_NULL_WITH_NULL_NULL) and observe that the TOE rejects the connection. 
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).<h:p/></test>
                    <test>(anon ciphersuite) The evaluator shall attempt to establish a TLS 1.2 connection with a test TLS server configured to negotiate a ciphersuite using the anonymous server authentication method 
                      and observe that the TOE rejects the connection.
                      <h:p/>
                      It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).<h:p/></test>
                    <h:p/>
                    See IANA TLS parameters for available ciphersuites to be selected by the test TLS server. 
                    The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. 
                    For example, if the TSF only supports the ciphersuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test server could select TLS_DH_ANON_WITH_AES_256_GCM_SHA_384.
                    <test>(deprecated encryption algorithm) For each deprecated encryption algorithm (NULL, RC2, RC4, DES,  IDEA, and TDES), 
                      the evaluator shall attempt to establish a TLS 1.2 connection with a test TLS server configured to negotiate a ciphersuite using the deprecated encryption algorithm 
                      and observe that the TOE rejects the connection.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                      <h:p/>
                      See IANA TLS parameters for available ciphersuites to be tested. The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. 
                      For example, if the TSF only supports TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test server could select
                      TLS_ECDHE_PSK_WITH_NULL_SHA_384, TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 TLS_ECDHE_RSA_WITH_RC4_128_SHA, TLS_DHE_DSS_WITH_DES_CBC_SHA, TLS_RSA_WITH_IDEA_CBC_SHA, and TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA.  
                    <h:p/></test>
                  </testlist>
                <h:p/></test>
                
                <!-- Test 4 and sub-tests -->
                <test>(extensions) For each supported version indicated in the following tests, 
                  the evaluator shall establish a connection from the TOE with a test server negotiating the tested version and providing 
                  server handshake messages as indicated when performing the following tests for validating proper extension handling:
                <testlist>
                  <test>
                    (signature_algorithms) [conditional] If the TSF supports certificate-based server authentication, the evaluator shall perform the following tests:
                    <testlist>
                      <test>For each supported version, the evaluator shall initiate a TLS session with a TLS test server and observe that the TSF’s 
                        client hello includes the signature_algorithms extension with values in conformance with the ST. <h:p/></test>
                      <test>(TLS 1.2 only) [conditional] If the TSF supports an ECDHE or DHE ciphersuite, the evaluator shall ensure the test TLS server sends 
                        a compliant server hello message selecting TLS 1.2 and one of the supported ECDHE or DHE ciphersuites, 
                        a compliant server certificate message, and a key exchange message signed using a signature algorithm and hash combination not included in the client’s hello message 
                        (e.g., RSA with SHA-1). The evaluator shall observe that the TSF terminates the handshake.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, illegal parameter, decryption error) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                      <h:p/></test>
                      <test>[conditional] If TLS 1.3 is supported, the evaluator shall configure the test TLS server to respond to the TOE with a compliant server hello message selecting TLS 1.3 
                        and a server certificate message, 
                        but then also sends a certificate verification message that uses a signature algorithm method not included in the signature_algorithms extension. The evaluator shall observe that the TSF terminates the TLS handshake.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, illegal parameter, bad certificate, decryption error) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  
                      <h:p/></test>
                      <test>
                        [conditional] For all supported versions for which signature_algorithms_cert is not supported, the evaluator shall ensure the test TLS server sends 
                        a compliant server hello message for the tested version and a server certificate message containing a valid certificate that represents the test TLS server, 
                        but which is signed using a signature and hash combination not included in the TSF’s signature_algorithms extension 
                        (e.g., a certificate signed using RSA and SHA-1). The evaluator shall observe that the TSF terminates the TLS session.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., unsupported certificate, bad certificate, decryption error, handshake failure) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  
                        <h:p/>
                        Certificate-based server authentication is required unless the TSF only supports TLS with shared PSK. 
                        For TLS 1.2, this is the case if only TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442,
                        TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487,
                        TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442, or
                        TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487, are supported. For TLS 1.3, this is the case if only PSK handshakes are supported.
                      <h:p/></test>
                    </testlist>
                  <h:p/></test>
                  <test>(signature_algorithms_cert) [conditional]  
                    If signature_algorithms_cert is supported, then for each version that uses the signature_algorithms_cert extension, 
                    the evaluator shall ensure that the test TLS server sends a compliant server hello message selecting the tested version and indicating certificate-based server authentication.
                    <h:p/>
                    The evaluator shall ensure that the test TLS server forwards a certificate message containing a valid certificate that represents the test TLS server, 
                    but which is signed by a valid Certification Authority using a signature and hash combination not included in the TSF’s signature_algorithms_cert extension 
                    (e.g., a certificate signed using RSA and SHA-1). The evaluator shall confirm the TSF terminates the session.
                    <h:p/>
                    <h:b>Note:</h:b> Support for certificate based authentication is assumed if the signature_algorithms_cert is supported. 
                    For TLS 1.2, a non-PSK ciphersuite, or one of TLS_RSA_PSK_WITH_AES_256_GCM_SHA384  
                    or TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487 is used to indicate certificate-based server authentication. 
                    For TLS 1.3, the test server completes a full handshake, even if a PSK is offered to indicate certificate-based server authentication. 
                    If the TSF only supports shared PSK authentication, Test 4.2 is not performed.
                    <h:p/>
                    For TLS 1.3, the server certificate message is encrypted. 
                    The evaluator will configure the test TLS server with the indicated certificate and ensure that the certificate is 
                    indeed sent by observing the buffer of messages to be encrypted, or by inspecting one or both sets of logs from the TSF and test TLS server.
                    <h:p/>
                    It is preferred that the TSF sends a fatal error alert message (e.g., unsupported certificate, bad certificate, decryption error, handshake failure) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                  <h:p/></test>
                  <test>(extended_master_secret) (TLS 1.2 only) The evaluator shall initiate a TLS 1.2 session with a test TLS server configured to compute a master secret according to RFC 5246, section 8. 
                    <h:p/>
                    The evaluator shall observe that the TSF’s client hello includes the extended master secret extension in accordance with RFC 7627, 
                    and ensures that the test TLS server does not include the extended master secret extension in its server hello. 
                    The evaluator shall observe that the TSF terminates the session.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                  <h:p/></test>
                  <test>(supported_groups) (TLS 1.2 only – for TLS 1.3, testing is combined with testing of the keyshare extension)
                  <testlist>
                    <test>For each supported group, the evaluator shall initiate a TLS session with a compliant test TLS 1.2 server supporting RFC 7919. 
                      The evaluator shall ensure that the test TLS server is configured to select TLS 1.2 and a ciphersuite using the supported group. 
                      The evaluator shall observe that the TSF’s client hello lists the supported groups as indicated in the ST, and that the TSF successfully establishes the TLS session.<h:p/></test>
                    <test>[conditional on TLS 1.2 support for ECDHE ciphersuites]  The evaluator shall initiate a TLS session with a test TLS server that is configured to use an explicit version of a named EC group supported by the client. 
                      The evaluator shall ensure that the test TLS server key exchange message includes the explicit formulation of the group in its key exchange message 
                      as indicated in RFC 4492 section 5.4. The evaluator shall confirm that the TSF terminates the session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                    <h:p/></test>
                  </testlist>
                  <h:p/></test>
                </testlist>
                <h:p/></test>
                
                <!-- Test 5 and sub-tests -->  
                <test>(TLS 1.3 extensions) [conditional] If the TSF supports TLS 1.3, the evaluator shall perform the following tests. 
                  For each test, the evaluator shall observe that the TSF’s client hello includes the supported versions extension with the value '03 04' indicating TLS 1.3:
                <testlist>
                  <test>(supported versions) The evaluator shall initiate TLS 1.3 sessions in turn from the TOE to a test TLS server configured as indicated in the sub-tests below: 
                  <testlist>
                    <test>The evaluator shall configure the test TLS server to include the supported versions extension in the server hello containing the value '03 03.' The evaluator shall observe that the TSF terminates the TLS session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter, handshake failure, protocol version) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).   
                    <h:p/></test>
                    <test>The evaluator shall configure the test TLS server to include the supported versions extension in the server hello containing the value '03 04' and complete a compliant TLS 1.3 handshake. 
                      The evaluator shall observe that the TSF completes the TLS 1.3 handshake successfully.<h:p/></test>
                    <test>[conditional] If the TSF is configurable to support both TLS 1.2 and TLS 1.3, 
                      the evaluator shall follow operational guidance to configure this behavior. The evaluator shall ensure that the test TLS server sends a TLS 1.2 compliant server handshake and 
                      observe that the server random does not incidentally include any downgrade messaging. 
                      The evaluator shall observe that the TSF completes the TLS 1.2 handshake successfully.
                      <h:p/>
                      <h:b>Note:</h:b> Enhanced downgrade protection defined in RFC 8446 is optional, and if supported, is tested separately. 
                      The evaluator may configure the test server’s random, or may repeat the test until the server’s random does not match a downgrade indicator.
                    <h:p/></test>
                  </testlist>
                  <h:p/></test>
                  <test>(supported groups, key shares) The evaluator shall initiate TLS 1.3 sessions in turn with a test TLS server configured as indicated in the following sub-tests:
                  <testlist>
                    <test>For each supported group, the evaluator shall configure the compliant test TLS 1.3 server to select a ciphersuite using the group. 
                      The evaluator shall observe that the TSF sends an element of the group in its client hello key shares extension 
                      (after a hello retry message from the test server, if the key share for the group is not included in the initial client hello). 
                      The evaluator shall ensure the test TLS server sends an element of the group in its server hello and observes that the TSF completes the TLS handshake successfully.<h:p/></test>
                    <test>For each supported group, the evaluator shall modify the server hello sent by the test TLS server to include an invalid key share value claiming 
                      to be an element the group indicated in the supported groups extension. 
                      The evaluator shall observe that the TSF terminates the TLS session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                      <h:p/>
                      For DHE ciphersuites, a zero value, or a value greater or equal to the modulus is not a valid element. 
                      For ECDHE groups, an invalid point contains x and y coordinates of the correct size, 
                      but represents a point not on the curve. The evaluator can construct such an invalid point by modifying a byte in the y coordinate of a valid point and verify that the coordinates do not satisfy the curve equation.
                    <h:p/></test>
                  </testlist>
                    <h:p/></test>
                  <test>
                    (PSK support) [conditional] If the TOE supports pre-shared keys, the evaluator shall follow the operational guidance to use pre-shared keys, 
                    shall establish a pre-shared key between the TSF and the test TLS server, and initiate TLS 1.3 sessions in turn 
                    between the TSF and the test TLS server configured as indicated in the following sub-tests:
                    <testlist>
                      <test>The evaluator shall configure the TSF to use the pre-shared key and ensure that the test TLS server functions as a compliant TLS 1.3 server.
                        The evaluator shall observe that the TSF’s client hello includes the pre_shared_key extension with the valid PSK indicator shared with the test server. 
                        The evaluator shall also observe that the TSF’s client hello also includes the psk_key_exchange_mode and the post_handshake_auth extensions and that the psk_key_exchange_mode 
                        indicates one or more of DHE or ECDHE modes but does not include the PSK-only mode. 
                        The evaluator shall observe that the TSF completes the TLS 1.3 handshake successfully in accordance with RFC 8446, to include the TSF sending appropriate key shares for one or more of the supported groups.
                        <h:p/>
                        Once the handshake is successful, the evaluator shall cause the test TLS server to send a certificate request and observe that the TSF provides a certificate message and certificate verify message. 
                        <h:p/>
                        <h:b>Note:</h:b> It may be necessary to complete a standard handshake and send a new-ticket message from the test TLS server to establish a pre-shared key, 
                        or it might be possible to configure the pre-shared key manually via out-of-band mechanisms. 
                        This can be performed in conjunction with other testing that is not tested as part of this SFR. 
                        It is not required at this time to support emerging standards on establishing PSK, but as such standards are finalized, this FP may be updated to require such support.
                        <h:p/>
                        TLS messages after the handshake are encrypted so it may not be possible to observe the certificate and certificate verify messages sent by the TSF directly. 
                        The evaluator may need to configure the test TLS server to use an application that requires post-handshake client authentication and 
                        terminates the session or otherwise has an observable effect if the certificate is not provided.
                      <h:p/></test>
                      <test>The evaluator shall attempt to configure the TSF to send early data. 
                        If there is no indication from the TSF that this is blocked, the evaluator shall repeat test 
                        5.3.1 with the TSF so configured and observe that the TSF does not send application data prior to receiving the server hello. 
                        <h:p/>
                        <h:b>Note:</h:b> Early data will be encrypted under the PSK and received by the test TLS server prior to it sending a server hello message. 
                      <h:p/></test>
                    </testlist>
                  <h:p/></test>
                </testlist>
                <h:p/></test>
                
                
                <!-- Test 6 and sub-tests -->
                <test>(corrupt finished message) For each supported version, the evaluator shall initiate a TLS session from the TOE to a test TLS server that sends a compliant set of server handshake messages, 
                  except for sending a modified finished message 
                  (modify a byte of the finished message that would have been sent by a compliant server). 
                  The evaluator shall observe that the TSF terminates the session and does not complete the handshake by 
                  observing that the TSF does not send application data provided to the TLS channel.<h:p/></test>
                
                <!-- Test 7 and sub-tests -->
                <test>(missing finished message) For each supported version, the evaluator shall initiate a session from the TOE to a test TLS server providing a compliant handshake, 
                  except for sending a random TLS message (the five byte header indicates a correct TLS message for the negotiated version, but not indicating a finished message) as the final message. 
                  The evaluator shall observe that the TSF terminates the session and does not send application data.
                  <h:p/>
                  <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption error) in response to this, 
                  but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
                  <h:p/>
                  For TLS 1.2, the modified message is sent after the change_cipher_spec message. For TLS 1.3, the modified message is sent as the last message of the server’s second flight of messages.
                <h:p/></test>
                
                <!-- Test 8 and sub-tests -->
                <test>(unexpected/corrupt signatures within handshake) The evaluator shall perform the following tests, according to the versions supported.
                <testlist>
                  <test>(TLS 1.2 only) [conditional] If the ST indicates support for ECDSA or DSA ciphersuites, 
                    the evaluator shall initiate a TLS session with a compliant test TLS server and  modify the signature in the server key exchange. 
                    The evaluator shall observe that the TSF terminates the session with a fatal alert message (e.g., decrypt error, handshake error).<h:p/></test>
                  <test>[conditional] If the ST indicates support for TLS 1.3, the evaluator shall initiate a TLS session between the TOE 
                    and a test TLS server that is configured to send a compliant server hello message, encrypted extension message, and certificate message, 
                    but will send a certificate verify message with an invalid signature (e.g., by modifying a byte from a valid signature). 
                    The evaluator shall confirm that the TSF terminates the session with a fatal error alert message (e.g., bad certificate, decrypt error, handshake error).<h:p/></test>
                  <test>(TLS 1.2 only) [conditional] If the ST indicates support for both RSA and ECDSA methods in the signature_algorithm 
                    (or, if supported, the signature_algorithms_cert) extension, 
                    and if the ST indicates one or more TLS 1.2 ciphersuites indicating each of the RSA and ECDSA methods in its signature components, 
                    the evaluator shall choose two ciphersuites: one indicating an RSA signature (cipher 1) and one indictaing an ECDSA signature (cipher 2).
                    The evalutor shall then establish establish two certificates that are trusted by the TOE: one representing the test TLS 1.2 server using an RSA signature (cert 1) and one 
                    representing the test TLS 1.2 server using an ECDSA signature (cert 2).
                    
                    The evaluator shall initiate a TLS session between the TOE and the test TLS 1.2 server that is configured to select cipher 1 and to send cert 2. The evaluator shall verify that the TSF terminates this TLS session.
                    The evaluator shall then initiate a TLS session between the TOE and the test 1.2 server that is configured to select cipher 2 and to send cert 1. The evaluator shall verify that the TSF also terminates this TLS session. 
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, decryption error, handshake failure) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                  <h:p/></test>
                </testlist>
                <h:p/></test>
                
                <!-- Test 9 and sub-tests -->
                <test>
                  [conditional] If the TSF supports certificate-based server authentication, 
                  then for each supported version, the evaluator will initiate a TLS session from the TOE to the compliant test TLS server 
                  configured to negotiate the tested version, and to authenticate using a certificate trusted by the TSF as specified in the following:
                  <testlist>
                    <test>(certificate extended key usage purpose) The evaluator shall send a server certificate that contains the Server Authentication purpose in the extendedKeyUsage extension 
                      and verify that a connection is established. 
                      The evaluator shall repeat this test using a different certificate that is otherwise valid and trusted but lacks the 
                      Server Authentication purpose in the extendedKeyUsage extension and observe the TSS terminates the session.
                      <h:p/>
                      Note: This test may be performed as part of certificate validation testing (FIA_X509_EXT.1).
                      <h:p/>
                      It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, decryption error, handshake failure) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                      <h:p/>
                      Ideally, the two certificates should be similar in regards to structure, the types of identifiers used, and the chain of trust.
                    <h:p/></test>
                    <test>
                      (certificate identifiers) For each supported method of matching presented identifiers, 
                      and for each name type for which the TSF parses the presented identifiers from the server certificate for the method, 
                      the evaluator shall establish a valid certificate trusted by the TSF to represent the test server using only the tested name type. The evaluator shall perform the following sub-tests: 
                      <testlist>
                        <test>The evaluator shall prepare the TSF as necessary to use the matching method and establish reference identifiers
                          for the test server for the tested name type. The evaluator shall ensure the test TLS server sends a certificate with a matching name of the tested name type 
                          and observe that the TSF completes the connection.<h:p/></test>
                        <test>The evaluator shall prepare the TSF as necessary to use the matching method and establish reference identifiers that do not match the name representing the test server. 
                          The evaluator shall ensure the test TLS server sends a certificate with a name of the type tested, and observe the TSF terminates the session.
                          <h:p/>
                          <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, unknown certificate) in response to this, 
                          but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
                        <h:p/></test>
                      </testlist>
                    <h:p/></test>
                    <test>(mixed identifiers)[conditional] If the TSF supports a name matching method where the TSF performs matching of both CN-encoded name types and SAN names of the same type, 
                      then for each such method, and for eah such name type, the evaluator shall establish a valid certificate trusted by the TSF 
                      to represent the test server using one name for the CN-encoded name type and a different name for the SAN name type The evaluator shall perform the following tests: 
                    <testlist>
                      <test>The evaluator shall follow the operational guidance to configure the TSF to use the name matching method and establish reference identifiers matching only the SAN. 
                        The evaluator shall ensure that the test server sends the certificate with the matching SAN and non-matching CN-encoded name, and observe that the TSF completes the connection.
                        <h:p/>
                        <h:b>Note:</h:b> Configuration of the TSF may depend on the application using TLS.<h:p/></test>
                      <test>The evaluator shall follow the operational guidance to configure the TSF to use the name matching method and establish reference identifiers matching only the CN-encoded name. 
                        The evaluator shall ensure that the test server sends the certificate with the matching SAN name and non-matching CN-encoded name, and observe that the TSF terminates the session.
                        <h:p/>
                        It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, unknown certificate) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  
                      <h:p/></test>
                    </testlist>
                    <h:p/></test>
                    <test>(empty certificate) The evaluator shall configure the test TLS server to supply an empty certificate message and verify that the TSF terminates the session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, unknown certificate) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
                    <h:p/></test>
                    <test>(invalid certificate) [conditional] If validity exceptions are supported, 
                      then  for each exception for certificate validity supported, 
                      the evaluator shall configure the TSF to allow the exception and ensure the test TLS server sends a certificate that is valid and trusted, 
                      except for the allowed exception. The evaluator shall observe that the TSF completes the session. 
                      <h:p/>
                      Without modifying the TSF configuration, the evaluator shall initiate a new session with the test TLS server that includes an additional validation error, and observe that the TSF terminates the session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., decode error, bad certificate) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
                      <h:p/>
                      The intent of this test is to verify the scope of the exception processing. 
                      If verifying certificate status information is claimed as an exception, then this test will verify that a TLS session succeeds when all supported methods for obtaining certificate status information is blocked from the TSF, 
                      to include removing any status information that might be cached by the TSF. 
                      If the exception is limited to specific certificates 
                      (e.g., only leaf certificates are exempt, or only certain leaf certificates are exempt) 
                      the additional validation error could be unavailable revocation information for a non-exempt certificate 
                      (e.g., revocation status information from an intermediate CA is blocked for the issuing CA of an exempt leaf certificate, 
                      or revocation information from the issuing CA is blocked for a non-exempt leaf certificate). 
                      If the only option for the exception is for all revocation information for all certificates, another validation error from <no-link>FIA_X509_EXT.1</no-link> (e.g., certificate expiration, extended key usage, etc.) may be used. 
                    <h:p/></test>
                  </testlist>
                <h:p/></test>
              </testlist>
	             </Tests>
            </aactivity>
          </f-element> 
	  <audit-event type="optional">
		<audit-event-descr>Failure to establish a TLS session</audit-event-descr>
		<audit-event-info>Reason for failure.</audit-event-info>
	  </audit-event>
	  <audit-event type="optional">
		<audit-event-descr>Failure to verify presented identifier</audit-event-descr>
		<audit-event-info>Presented identifier and reference identifier.</audit-event-info>
	  </audit-event>
	  <audit-event type="optional">
		<audit-event-descr>Establishment/termination of a TLS session</audit-event-descr>
		<audit-event-info>Non-TOE endpoint of connection.</audit-event-info>
	 </audit-event>
        </f-component>
        
        
        
        <f-component cc-id="fcs_tlsc_ext.2" name="TLS Client Support for Mutual Authentication" status="sel-based">
		  <depends on-sel="tlsc_mutual_auth"/>
          <f-element id="fel-mut-auth-certs">
            <title>The TSF shall support mutual authentication using X.509v3 certificates during the handshake and <selectables>
              <selectable>in support of post-handshake authentication requests</selectable>
              <selectable>at no other time</selectable></selectables>, in accordance with <selectables> 
              <selectable>RFC 5246, section 7.4.4</selectable>
              <selectable>RFC 8446, section 4.3.2</selectable></selectables>.</title>
            <note role="application">
              Clients that support TLS 1.3 and post-handshake authentication claim ‘in support of post-handshake authentication requests’ in the first selection. 
              The ‘at no other time’ selection is claimed for clients only supporting TLS 1.2 or for TLS 1.3 clients that do not support post-handshake authentication.  
              <h:p/>
              The certificate request sent by the server specifies the signature algorithms and certification authorities supported by the server. 
              If the client does not possess a matching certificate, it sends an empty certificate message. 
              The structure of the certificate request message is changed in TLS 1.3 to use the signature_algorithm, signature_algorithms_cert, and certificate_authorities extensions, 
              and RFC 8446 allows for TLS 1.2 implementations to use the new message structure. 
              The "RFC 8446, section 4.3.2" option is claimed in the second selection if TLS 1.3 is supported or if the RFC 8446 method is supported for TLS 1.2 servers. 
              The "RFC 5246, section 7.4.4" option is claimed if the RFC 5246 method is supported for interoperability with TLS 1.2 servers that do not adopt the RFC 8446 method. 
              When mutual authentication is supported, at least one of these methods must be claimed, per the selection.
              <h:p/>
              This SFR is claimed if "mutual authentication" is selected in FCS_TLSC_EXT.1.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall ensure that the TSS description required per <no-link>FIA_X509_EXT.2.1</no-link> includes the use of client-side certificates for TLS mutual authentication. 
                The evaluator shall also ensure that the TSS describes any factors beyond configuration that are necessary in order for the client to engage in mutual authentication using X.509v3 certificates.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall ensure that the operational guidance includes any instructions necessary to configure the TOE to perform mutual authentication. 
                The evaluator also shall verify that the operational guidance required per <no-link>FIA_X509_EXT.2.1</no-link> includes instructions for configuring the client-side certificates for TLS mutual authentication.
                <h:p/>
	      </Guidance>
              <Tests>
                For each supported TLS version, the evaluator shall perform the following tests:
       <testlist>
         <test>The evaluator shall establish a TLS connection from the TSF to a test TLS server that negotiates the tested version 
           and which is not configured for mutual authentication (i.e., does not send a Server’s Certificate Request (type 13) message). 
           The evaluator observes negotiation of a TLS channel and confirms that the TOE did not send a Client’s Certificate message (type 11) during handshake.<h:p/></test>
         <test>The evaluator shall establish a connection to a test TLS server with a shared trusted root that is configured for mutual authentication 
           (i.e., it sends a Server’s Certificate Request (type 13) message). 
           The evaluator observes negotiation of a TLS channel and confirms that the TOE responds with a non-empty Client’s Certificate message (type 11) and Certificate Verify (type 15) message.<h:p/></test>
         <test>[conditional] If the TSF supports post-handshake authentication, 
           the evaluator shall establish a pre-shared key between the TSF and a test TLS 1.3 server. 
           The evaluator shall initiate a TLS session using the pre-shared key and confirm the TSF and test TLS 1.3 server successfully complete the TLS handshake and both support post-handshake authentication. 
           After the session is successfully established, the evaluator shall initiate a certificate request message from the test TLS 1.3 server. 
           The evaluator shall observe that the TSF receives that authentication request 
           and shall take necessary actions, in accordance with the operational guidance, to complete the authentication request. 
           The evaluator shall confirm that the test TLS 1.3 server receives certificate and certificate verification messages from the TSF over the channel that authenticates the client.
           <h:p/>
           <h:b>Note:</h:b> TLS 1.3 certificate requests from the test server and client certificate and certificate verify messages are encrypted. 
           The evaluator confirms that the TSF sends the appropriate messages by examining the messages received at the test TLS 1.3 server and by inspecting any relevant server logs. 
           The evaluator may also take advantage of the calling application to demonstrate that the TOE receives data configured at the test TLS server. 
         <h:p/></test>
       </testlist>
	      </Tests>
            </aactivity>
          </f-element>
	  <audit-event/>
        </f-component>
	      
        <f-component cc-id="fcs_tlsc_ext.3" name="TLS Client Downgrade Protection" status="sel-based">
          <depends on-sel="tlsc_downgrade_protection"/>
          <f-element>
            <title>The TSF shall not establish a TLS channel if the server hello message includes 
              <selectables>
                <selectable>TLS 1.2 downgrade indicator</selectable>
                <selectable>TLS 1.1 or below downgrade indicator</selectable></selectables>
              in the server random field. </title>
            <note role="application">The ST author claims the “TLS 1.2 downgrade indicator” when FCS_TLSC_EXT.1 indicates support for both TLS 1.3 and supplemental downgrade protection. 
              This option is not claimed if TLS 1.3 is not supported. 
              The “TLS 1.1 or below downgrade indicator” option may be claimed regardless of support for TLS 1.3, 
              but should only be claimed if the TSF is capable of detecting the indicator. 
              As indicated in FCS_TLSC_EXT.1.1, this FP requires the client to terminate TLS 1.1 or below sessions. 
              It is acceptable for the TSF to always terminate TLS 1.1 sessions based on the server hello negotiated version field and ignore any downgrade indicator. 
              However, a product that is capable of detecting the TLS 1.1 or below downgrade indicator may take different actions depending on whether the TLS 1.1 or below downgrade indicator is set. 
              <h:p/>
              This SFR is claimed if "supplemental downgrade protection" is selected in FCS_TLSS_EXT.1.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall review the TSS and confirm that the description of the TLS client protocol includes the downgrade protection mechanism in accordance with RFC 8446 
                and identifies any configurable features of the TSF needed to meet the requirements. 
                If the ST claims that the TLS 1.1 and below indicator is processed, 
                the evaluator shall confirm that the TSS indicates which configurations allow processing of the downgrade indicator 
                and the specific response of the TSF when it receives the downgrade indicator as opposed to simply terminating the session for the unsupported version.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall review the operational guidance and confirm that any instructions to configure the TSF to meet the requirements are included.
                <h:p/>
	      </Guidance>
              <Tests>
                The evaluator shall perform the following tests to confirm the response to downgrade indicators from a test TLS 1.3 server:
              <testlist>
                <test>[conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a TLS 1.3 session with a test TLS 1.3 server 
                  configured to send a compliant TLS 1.2 server hello (not including any TLS 1.3 extensions) 
                  but including the TLS 1.2 downgrade indicator ‘44 4F 57 4E 47 52 44 01’ in the last eight bytes of the server random field. 
                  The evaluator shall confirm that the TSF terminates the session.
                  <h:p/>  
                  <h:b>Note:</h:b> It is preferred that the TSF send a fatal error alert message (e.g., illegal parameter), but it is acceptable that the TSF terminate the session without sending an error alert.
                <h:p/></test>
                <test>[conditional] If the TSF supports the TLS 1.1 or below downgrade indicator and if the ST indicates a configuration where the indicator is processed, 
                  the evaluator shall follow operational guidance instructions to configure the TSF so it parses a TLS 1.1 handshake to detect and process the TLS downgrade indicator. 
                  The evaluator shall initiate a TLS session between the TOE and a test TLS server that is configured to send a TLS 1.1 server hello message 
                  with the downgrade indicator ‘44 4F 57 4E 47 52 44 00’ in the last eight bytes of the server random field, 
                  but which is otherwise compliant with RFC 4346. The evaluator shall observe that the TSF terminates the session as described in the ST.
                  <h:p/>
                  <h:b>Note:</h:b> It is preferred that the TSF send a fatal error alert message (illegal parameter or unsupported version), but it is acceptable that the TSF terminate the session without sending an error alert. 
                  <h:p/>
                  Use of the TLS 1.1 and below indicator as a redundant mechanism 
                  where there is no configuration that actually processes the value does not require additional testing, 
                  since this would be addressed by Test 2.1 for FCS_TLSC_EXT.1.1. 
                  This test is only required if the TSF responds differently (e.g., a different error alert) when the downgrade indicator is present than when TLS 1.1 or below is negotiated and the downgrade indicator is not present.
                <h:p/></test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element> 
	  <audit-event />
        </f-component>
	      
        <f-component cc-id="fcs_tlsc_ext.4" name="TLS Client Support for Renegotiation" status="sel-based">
          <depends on-sel="tlsc_impl"/>
          <f-element id="fel-renego">
            <title>The TSF shall support secure renegotiation through use of <selectables>
              <selectable>the “renegotiation_info” TLS extension</selectable>
              <selectable>the TLS_EMPTY_RENEGOTIATION_INFO_SCSV signaling ciphersuite signaling value</selectable></selectables>
           in accordance with RFC 5746, and shall terminate the session if an unexpected server hello is received and <selectables>
             <selectable>hello request message is received</selectable>
             <selectable>in no other case</selectable></selectables>. 
            </title>

            <note role="application">
              A client allowing TLS 1.2 connections may present either the "renegotiation_info" extension or the 
              signaling ciphersuite value TLS_EMPTY_RENEGOTIATION_INFO_SCSV in the initial 
              client hello message to indicate support for secure renegotiation. The ST author claims the methods supported. 
              The TLS_EMPTY_RENEGOTIATION_INFO_SCSV is the preferred mechanism for TLS 1.2 protection against insecure renegotiation when the client does not renegotiate. 
              The ST author will claim the ‘hello request message is received’ option in the second selection to indicate support for this mechanism.
              <h:p/>
              RFC 5746 allows the client to accept connections with servers that do not support the extension; 
              this FP refines RFC 5746 and requires the client to terminate sessions with such servers. 
              Thus, unexpected server hello messages include an initial server hello negotiating 
              TLS 1.2 that does not contain a renegotiation_info extension, 
              an initial server hello negotiating TLS 1.2 that has a renegotiation_info that is non-empty, 
              a subsequent server hello negotiating TLS 1.2 that does not contain a renegotiation_info extension, 
              and a subsequent server hello negotiating TLS 1.2 that has a renegotiation_info extension with an incorrect renegotiated_connection value. 
              <h:p/>
              TLS 1.3 provides protection against insecure renegotiation by not allowing renegotiation. 
              If TLS 1.3 is claimed in FCS_TLSC_EXT.1.1, the client receives a server hello that attempts to negotiate TLS 1.3, and the server hello also contains a renegotiation_info extension; the client will terminate the connection.
              <h:p/>
              This SFR is claimed if "TLS as a client" is selected in FCS_TLS_EXT.1.1.
            </note>
            <aactivity>
              <TSS>The evaluator shall examine the ST to ensure that TLS renegotiation protections are described in accordance with the requirements. 
                The evaluator shall ensure that any configurable features of the renegotiation protections are identified.<h:p/></TSS>
              <Guidance>The evaluator shall examine the operational guidance to confirm that instructions for any configurable features of the renegotiation protection mechanisms are included.<h:p/></Guidance>
              <Tests>
                The evaluator shall perform the following tests as indicated. One or both of Tests 1 or 2 is required, depending on whether the TSF is configurable to reject renegotiation 
                or supports secure renegotiation methods defined for TLS 1.2. If TLS 1.3 is supported, Test 2 is required.
              <testlist>
                <test>[conditional] If the TSF supports a configuration to accept renegotiation requests for TLS 1.2, 
                  the evaluator shall follow any operational guidance to configure the TSF. The evaluator shall perform the following tests:  
                <testlist>
                  <test>The evaluator shall initiate a TLS connection with a test server configured to negotiate a compliant TLS 1.2 handshake. 
                    The evaluator shall inspect the messages received by the test TLS 1.2 server. 
                    The evaluator shall observe that either the “renegotiation_info” field or the SCSV ciphersuite is included in the ClientHello message during the initial handshake.<h:p/></test>
                  <test>For each of the following sub-tests, the evaluator shall initiate a new TLS connection with a test TLS 1.2 server configured to send a renegotiation_info extension as specified, 
                    but otherwise complete a compliant TLS 1.2 session:
                  <testlist>
                    <test>The evaluator shall configure the test TLS 1.2 server to send a renegotiation_info extension whose value indicates a non-zero length. 
                      The evaluator shall confirm that the TSF terminates the connection. 
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). <h:p/></test>
                    <test>The evaluator shall configure the test TLS 1.2 server to send a compliant renegotiation_info extension and observe the TSF successfully completes the TLS 1.2 connection.<h:p/></test>
                    <test>The evaluator shall initiate a session renegotiation after completing a successful handhake with a test TLS 1.2 server that completes a successful TLS 1.2 handshake 
                      (as in Test 1.1) and then sends a hello reset request from the test TLS server with a “renegotiation_info” extension that has an unexpected “client_verify_data” or “server_verify_data” 
                      value (modify a byte from a compliant response). The evaluator shall verify that the TSF terminates the connection.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter, handshake error) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                    <h:p/></test>
                  </testlist>
                  <h:p/></test>
                </testlist>
                <h:p/></test>
                <test>[conditional] if the TSF supports a configuration that prevents renegotiation, the evaluator shall perform the following tests:
                  <testlist>
                    <test>(TLS 1.2) [conditional] If the TLS supports a configuration to reject TLS 1.2 renegotiation, 
                      the evaluator shall follow the operational guidance as necessary to prevent renegotiation. 
                      The evaluator shall initiate a TLS session between the so-configured TSF and a test TLS 1.2 server that is configured to perform a compliant handshake, 
                      followed by a hello reset request. The evaluator shall confirm that the TSF completes the initial handshake successfully but terminates the TLS session after receiving the hello reset request.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). <h:p/></test>
                    <test>[conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a TLS session between the TSF and a test TLS 1.3 server that completes a compliant TLS 1.3 handshake, 
                      followed by a hello reset message. The evaluator shall observe that the TSF completes the initial TLS 1.3 handshake successfully, but terminates the session on receiving the hello reset message.
                      <h:p/>
                      It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
                    <h:p/></test>
                  </testlist>
                <h:p/></test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>
	  <audit-event />
        </f-component>
	      
        <f-component cc-id="fcs_tlsc_ext.5" name="TLS Client Support for Session Resumption" status="sel-based">
          <depends on-sel="tlsc_resumption"/> 
          <f-element>
          <title>
            The TSF shall support session resumption as a client via the use of <selectables>
              <selectable>session ID in accordance with RFC 5246</selectable>
              <selectable>tickets in accordance with RFC 5077</selectable>
              <selectable id="tlsc_v13_resumption">PSK and tickets in accordance with RFC 8446</selectable></selectables>. 
            </title>
            <note role="application">
              The ST author indicates which session resumption mechanisms are supported. 
              One or both of the first two options, "session ID in accordance with RFC 5246" and "tickets in accordance with RFC 5077" are claimed for TLS 1.2 resumption. 
              If resumption of TLS 1.3 sessions is supported, "PSK and tickets in accordance with RFC 8446" is selected, and the selection-based SFR FCS_TLSC_EXT.6 must also be claimed.
              <h:p/>
              While it is possible to perform session resumption using PSK ciphersuites in TLS 1.2, this is uncommon. 
              Validation of key exchange and session negotiation rules for PSK ciphersuites is independent of the source of the pre-shared key and is covered in FCS_TLSC_EXT.1. 
              <h:p/>
              This SFR is claimed if "session resumption" is selected in FCS_TLSC_EXT.1.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall examine the ST and confirm that the TLS client protocol description includes a description of the supported resumption mechanisms.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall ensure the operational guidance describes instructions for any configurable features of the resumption mechanism.<h:p/>
              </Guidance>
              <Tests>
              The evaluator shall perform the following tests:
              <testlist>
                <test>For each supported TLS version and for each supported resumption mechanism that is supported for that version, 
                  the evaluator shall establish a new TLS session between the TSF and a compliant test TLS server that is configured to negotiate the indicated version 
                  and perform resumption using the indicated mechanism. 
                  The evaluator shall confirm that the TSF completes the initial TLS handshake and shall cause the TSF to close the session normally. 
                  The evaluator shall then cause the TSF to resume the session with the test TLS server using the indicated method and observe that the TSF successfully establishes the session.
                  <h:p/>
                  <h:b>Note:</h:b> For each method, successful establishment refers to proper use of the mechanism, to include compliant extensions and behavior, as indicated in the referenced RFC.
                <h:p/></test>
                <test>(TLS 1.3 session id echo) [conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a new TLS 1.3 session with a test TLS server. 
                  The evaluator shall cause the test TLS server to send a TLS 1.3 server hello message 
                  (or a hello retry request if the TSF doesn’t include the key share extension) that contains a different value in the legacy_session_id field, and observe that the TSF terminates the session.
                  <h:p/>
                  <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, 
                  but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                <h:p/></test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>  
	  <audit-event/>
        </f-component>

        <f-component cc-id="fcs_tlsc_ext.6" name="TLS Client TLS 1.3 Resumption Refinements" status="sel-based">
          <depends on-sel="tlsc_v13_resumption"/> 
          <f-element>
            <title>
              The TSF shall send a psk_key_exchange_mode extension with the value psk_dhe when TLS 1.3 session resumption is offered. 
            </title>
          </f-element>
          <f-element>
            <title>
                The TSF shall not send early data in TLS 1.3 sessions. 
            </title>
            <note role="application">
              This SFR is claimed when session resumption is supported for TLS 1.3. RFC 8446 allows pre-shared keys to be used directly 
              and also allows early data to be protected using only the pre-shared key. This SFR refines the RFC to use PSK only with a supplemental DHE or ECDHE key exchange to ensure perfect forward secrecy for all sessions. 
              <h:p/>
              This SFR is claimed if "PSK and tickets in accordance with RFC 8446" is selected in FCS_TLSC_EXT.5.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall examine the TSS to verify that the TLS client protocol description indicates that the PSK exchange requires DHE mode and prohibits sending early data. 
                The evaluator shall examine the TSS to verify it lists all applications that can be secured by TLS 1.3 using pre-shared keys and 
                describes how each TLS 1.3 client application ensures data for the application is not sent using early data.
                <h:p/>
              </TSS>
              <Guidance>
                The evaluator shall examine the operational guidance to verify that instructions for any configurable features that are required to meet the requirement are included. 
                The evaluator shall ensure the operational guidance includes any instructions required to configure applications so the TLS 1.3 client implementation does not send early data.
                <h:p/>
              </Guidance>
              <Tests>
                [conditional] For each application that is able to be secured via TLS 1.3 using PSK, 
                the evaluator shall follow operational guidance to configure the application not to send early data. 
                The evaluator shall cause the application to initiate a resumed TLS 1.3 session between the TSF and a compliant test TLS 1.3 server as in Test 1 of FCS_TLSC_EXT.5. 
                The evaluator shall observe that the TSF client hello for TLS 1.3 includes the psk_mode extension with the value PSK_DHE and sends a key share value for a supported group. 
                The evaluator shall confirm that early data is not received by the test TLS server.
                <h:p/>
                <h:b>Note:</h:b> If no applications supported by the TOE provide data to TLS 1.3 that can be sent using PSK, this test is omitted.
              </Tests>
            </aactivity>
          </f-element>  
          <audit-event/>
        </f-component>


        <f-component cc-id="fcs_tlss_ext.1" name="TLS Server Protocol" status="sel-based">
          <depends on-sel="tlss_impl"/>
          <f-element id="fel-tlss-impl">
            <title> The TSF shall implement TLS 1.2 (RFC 5246) and
              <selectables>
                <selectable>TLS 1.3 (RFC 8446)</selectable>
                <selectable exclusive='yes'>no other TLS version</selectable>
              </selectables> as a server that supports additional functionality for session renegotiation protection and
              <selectables linebreak="yes">
                <selectable id="tlss_mutual_auth">mutual authentication</selectable>
                <selectable id="tlss_downgrade_protection">supplemental downgrade protection</selectable>
                <selectable id="tlss_resumption">session resumption</selectable>
                <selectable>no optional functionality</selectable></selectables>
              and shall reject connection attempts from clients supporting only TLS 1.1, TLS 1.0, or SSL versions.
            </title>
            <note role="application">
              These requirements will be revisited as new TLS versions are standardized by the IETF.
              <h:p/>
              If "mutual authentication" is selected, then the ST must additionally include the requirements from FCS_TLSS_EXT.2. If the TOE implements mutual authentication, this selection must be made.
              <h:p/>
              If "session renegotiation protection" is selected, then the ST must additionally include the requirements from FCS_TLSS_EXT.4. If the TOE implements session renegotiation, or if TLS 1.3 is supported, this selection must be made.
              <h:p/>
              If "supplemental downgrade protection" is selected, then the ST must additionally include the requirements from FCS_TLSS_EXT.3. 
              If the TOE provides downgrade protection as indicated in RFC 8446, in particular, if TLS 1.3 is supported, this selection must be made. 
              <h:p/>
              If "session resumption" is selected, then the ST must additionally include the requirements from FCS_TLSS_EXT.5.
            </note>
          </f-element>
          <f-element>
            <title>
              The TSF shall be able to support the following TLS 1.2 ciphersuites:
              <selectables linebreak="yes">
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289, RFC 8422</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289, RFC 8422</selectable>
                <selectable>TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>PP-specific ciphersuites using pre-shared secrets including <selectables linebreak="yes">
                  <selectable>TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442</selectable>
                  <selectable>TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487</selectable>
                  <selectable>TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487</selectable>
                  <selectable>TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442</selectable>
                  <selectable>TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487</selectable>
                  <selectable>TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487</selectable></selectables></selectable>
                <selectable>the following TLS 1.3 ciphersuites: <selectables linebreak="yes">
                  <selectable>TLS_AES_256_GCM_SHA384 as defined in RFC 8446</selectable>
                  <selectable>TLS_AES_128_GCM_SHA256 as defined in RFC 8446</selectable>
                  <selectable><assignable>other TLS 1.3 ciphersuites]</assignable></selectable></selectables></selectable></selectables>
              using a preference order based on <selectables>
                <selectable>RFC 9151 priority</selectable>
                <selectable>client hello ordering</selectable>
                <selectable><assignable>additional priority</assignable></selectable>
              </selectables>
            </title>
            <note role="application">
              The ST author should select the ciphersuites that are supported and must select at least one ciphersuite for each TLS version supported. 
              It is necessary to limit the ciphersuites that can be used in an evaluated configuration administratively on the server in the test environment. 
              If administrative steps need to be taken so that the ciphersuites negotiated by the implementation are limited to those in this requirement, then the appropriate instructions need to be contained in the guidance. 
              <h:p/>
              The final selection indicates the TOE’s preference for negotiating a ciphersuite. 
              RFC 9151 indicates the required ciphersuites for NSS systems and ‘RFC 9151 priority’ is claimed if those ciphersuites are selected whenever offered by the client. 
              In general, it is preferred that GCM ciphersuites are selected over CBC ciphersuites, 
              ECDHE is selected over RSA and DHE, and SHA256 or SHA384 is selected over SHA1. 
              <h:p/>
              The ‘client hello ordering’ option is claimed if client priority is considered; 
              if both are claimed, the ST author should indicate which is primary and which is secondary, and whether the priority scheme is configurable. 
              If other priority schemes or if tertiary priority is used, the ST author will claim the third option and describe the scheme in the ST.
              <h:p/>
              Support for TLS_RSA_WITH_AES_128_CBC_SHA is not required despite being mandated by RFC 5246.
            </note>
          </f-element>
          <f-element>
          <title>
            The TSF shall not establish a connection with a client that does not indicate support for at least one of the supported ciphersuites.
          </title>
          </f-element>
          <f-element>
          <title>
            The TSF shall be able to process the following TLS client hello message extensions: 
            <h:ul>
              <h:li>signature_algorithms extension (RFC 8446) indicating support for 
                <selectables linebreak="yes">
                  <selectable>ecdsa-secp384r1_sha384 (RFC 8446)</selectable>
                  <selectable>rsa_psks1_sha384 (RFC 8446)</selectable></selectables>, and <selectables linebreak="yes">
                    <selectable>rsa_pss_pss_sha384 (RFC 8603)</selectable>
                    <selectable>rsa_pss_rsae_sha384 (RFC 8603)</selectable>
                    <selectable><assignable>other non-deprecated signature algorithms</assignable></selectable>
                    <selectable>no other signature algorithms</selectable></selectables>
              </h:li>
              <h:li>
                extended_master_secret extension (RFC 7627) enforcing client support
              </h:li>
              <h:li>
                the following other extensions: <selectables linebreak="yes">
                  <selectable>signature_algorithms_cert extension (RFC 8446) indicating support for <selectables linebreak="yes">
                    <selectable>ecdsa-secp384r1_sha384 (RFC 8446)</selectable>
                    <selectable>rsk_psks1_sha384 (RFC 8446)</selectable></selectables>, and <selectables linebreak="yes">
                      <selectable>rsa_pss_pss_sha384 (RFC 8603)</selectable>
                      <selectable>rsa_pss_rsae_sha384 (RFC 8603)</selectable>
                      <selectable>rsa_pkcs1_sha256 (RFC 8446)</selectable>
                      <selectable>rsa_pss_rsae_sha256 (RFC 8446)</selectable>
                      <selectable><assignable>other non-deprecated signature algorithms</assignable></selectable>
                      <selectable>no other signature algorithms</selectable>
                    </selectables></selectable>
                  <selectable>supported_versions extension (RFC 8446) indicating support for TLS 1.3</selectable>
                  <selectable>supported_groups extension (RFC 7919, RFC 8446) indicating support for <selectables linebreak="yes">
                    <selectable>secp256r1</selectable>
                    <selectable>secp384r1</selectable>
                    <selectable>secp521r1</selectable>
                    <selectable>ffdhe2048(256)</selectable>
                    <selectable>ffdhe3072(257)</selectable>
                    <selectable>ffdhe4096(258)</selectable>
                    <selectable>ffdhe6144(259)</selectable>
                    <selectable>ffdhe8192(260)</selectable></selectables></selectable>
                  <selectable>key_share extension (RFC 8446)</selectable>
                  <selectable>no other extensions</selectable></selectables>.
              </h:li>
            </h:ul>
          </title>
          <note role="application">
            If support for TLS 1.3 is claimed in FCS_TLSS_EXT.1.1, the selections for supported_versions, supported_groups, and key_share are claimed. 
            Even if support for TLS 1.3 is not claimed, if ECDHE ciphersuites are claimed in FCS_TLSS_EXT.1.4, the entry for supported_groups is claimed. Support for additional extensions is acceptable.
            For signature_algorithms and signature_algorithms_certs (if supported), at least one of the signature schemes presented in the first sub-selection is claimed.
          </note>
          </f-element>
          <f-element>
            <title>
              The TSF shall perform key establishment for TLS using <selectables linebreak="yes">
                <selectable>RSA with size <selectables>
                  <selectable>2048 bits</selectable>
                  <selectable>3072 bits</selectable>
                  <selectable>4096 bits</selectable></selectables> and no other sizes</selectable>
                <selectable>Diffie-Hellman parameters with size <selectables>
                  <selectable>2048 bits</selectable>
                  <selectable>3072 bits</selectable>
                  <selectable>4096 bits</selectable>
                  <selectable>6144 bits</selectable>
                  <selectable>8192 bits</selectable></selectables> and no other sizes</selectable>
                <selectable>Diffie-Hellman groups <selectables>
                  <selectable>ffdhe2048</selectable>
                  <selectable>ffdhe3072</selectable>
                  <selectable>ffdhe4096</selectable>
                  <selectable>ffdhe6144</selectable>
                  <selectable>ffdhe8192</selectable></selectables> and no other groups,
                consistent with the client's supported groups extension and <selectables>
                  <selectable>key share</selectable>
                  <selectable>no other</selectable></selectables> extension
                </selectable>
                <selectable>ECDHE parameters using elliptic curves <selectables>
                  <selectable>secp256r1</selectable>
                  <selectable>secp384r1</selectable>
                  <selectable>secp521r1</selectable></selectables> and no other curves,  
                  consistent with the client's supported groups extension and <selectables>
                    <selectable>key share</selectable>
                    <selectable>no other</selectable></selectables> extension and using non-compressed formatting for points
                </selectable></selectables>.
            </title>
            <note role="application">
              TLS 1.2 and TLS 1.3 perform key exchange using different mechanisms. In TLS 1.2, the requirements apply to the key exchange messages received by the server and optionally 
              (for DHE or ECDHE ciphersuites) sent by the server. 
              In TLS 1.3, the requirements apply to the values of the key share extension contained in the client and server hello messages. 
              The options depend on the supported ciphersuites. For each session, the key exchange method is consistent with the selected ciphersuite (TLS 1.2), 
              the supported groups extension (TLS 1.3 and conditionally, TLS 1.2), or the key share extension (TLS 1.3). 
              <h:p/>
              If the ST lists an RSA ciphersuite in FCS_TLSS_EXT.1.1, the ST must include the RSA selection in the requirement.
              <h:p/>
              If the ST lists a DHE ciphersuite in FCS_TLSS_EXT.1.2, the ST must include the Diffie-Hellman selection for parameters of a certain size, the Diffie-Hellman groups selection in support of TLS 1.2 exchanges, or both. 
              The selection for "Diffie-Hellman parameters" refers to the method defined by RFC 5246, section 7.4.3 where the server provides Diffie-Hellman parameters to the client.  
              The “Diffie-Hellman groups” selection indicates key exchange negotiation in accordance with RFC 7919 using the supported groups extension. 
              RFC 7919 identifies particular Diffie-Hellman groups, which are listed in the following selection. This option is the preferred mechanism for TLS 1.2, and must be claimed if TLS 1.3 DHE ciphersuites are supported. 
              <h:p/>
              If the ST lists an ECDHE ciphersuite in FCS_TLSS_EXT.1.2, 
              the ST must include the selection for ECDHE using elliptic curves in the requirement, consistent with the support indicated for the supported groups extension in FCS_TLSS_EXT.1.4.
              <h:p/>
              When TLS 1.3 is negotiated (if supported), the supported group negotiated (a supported DHE or ECDHE group) 
              agrees with one of the client’s supported groups and the supplied key share element, and the product’s key share element is a member of the selected group. 
              If the TLS 1.3 client does not initially provide a key share element for a group supported by both the product and the client, 
              the TOE is expected to send a hello retry request message indicating the selected group; 
              the requirement for matching the group indicated in the client’s hello message applies to the client’s hello message received in response to the hello retry request message.
              <h:p/>
              This SFR is claimed if "TLS as a server" is selected in FCS_TLS_EXT.1.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall check the description of the implementation of this protocol in the TSS to ensure the supported TLS versions, features, ciphersuites, and extensions, 
                are specified in accordance with RFC 5246 (TLS 1.2) and RFC 8446 (TLS 1.3 and updates to TLS 1.2) as appropriate. The evaluator shall check the description to see if beta TLS 1.3 versions are supported.
                <h:p/>
                The evaluator shall verify that ciphersuites indicated in FCS_TLSS_EXT.1.2 are included in the description, and that none of the following ciphersuites are supported: ciphersuites indicating 
                'NULL,' 'RC2,' 'RC4,' 'DES,' 'IDEA,' or 'TDES' in the encryption algorithm component, indicating 'anon,' or indicating MD5 or SHA in the message digest algorithm component.
                <h:p/>
                The evaluator shall verify that the TLS implementation description includes the extensions as required in FCS_TLSS_EXT.1.4.
                <h:p/>
                The evaluator shall confirm that the TLS description includes the number and types of certificates that can be installed to represent the TOE.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall check the operational guidance to ensure that it contains instructions on configuring the product so that the TSF conforms to the requirements. 
                If the ST indicates that beta versions of TLS 1.3 are supported for backward compatibility, the evaluator shall ensure that the operational guidance provides instructions for disabling these versions.
                <h:p/>
                The evaluator shall review the operational guidance to ensure instructions on installing certificates representing the TOE are provided.
                <h:p/>
	      </Guidance>
              <Tests>
                The evaluator shall perform the following tests:
                <testlist>
                  <!-- Test 1 and subtests -->
                  <test>(supported TLS 1.2 configurations) The evaluator shall perform the following tests: 
                    <testlist>
                      <test>For each supported TLS 1.2 ciphersuite, the evaluator shall send a compliant TLS 1.2 client hello with the highest version or legacy version of 1.2 (value '03 03'), 
                        a single entry in the ciphersuites field consisting of the specific ciphersuite, and
                        no supported version extension or key share extension. The evaluator shall observe the TSF’s server hello indicates TLS 1.2 in the highest version or legacy version field,  
                        does not include a supported version or key share extension, and indicates the specific ciphersuite in the ciphersuite field. 
                        If the ciphersuite requires certificate-based authentication, the evaluator shall observe that the TSF sends a valid certificate representing the TOE and successfully completes the TLS handshake. 
                        <h:p/>
                        <h:b>Note:</h:b> The ciphersuites TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442, TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487, 
                        TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442, and TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487, if supported, do not require certificate-based authentication of the server. 
                        <h:p/></test>
                      <test>(TLS 1.2 support for TLS 1.3 clients) [conditional] If the TSF is configurable to support only TLS 1.2 (or if TLS 1.3 is not supported), 
                        and if the TSF supports DHE or ECDHE ciphersuites, the evaluator shall follow any operational guidance instructions necessary to configure the TSF to only support TLS 1.2. 
                        For each supported TLS 1.2 ciphersuite with DHE or ECDHE indicated as the key exchange method, 
                        the evaluator shall send a client hello with the highest version or legacy version of 1.2 (value '03 03'), 
                        a list of ciphersuites consisting of one or more TLS 1.3 ciphersuites followed by the specific TLS 1.2 ciphersuite and no other TLS 1.2 ciphersuites in the ciphersuites field, 
                        and including a TLS 1.3 supported group and key share extension with consistent values. 
                        The evaluator shall observe that the TSF’s server hello indicates TLS 1.2 in the highest version or legacy version field, 
                        does not include a supported version or key share extension, and indicates the specific TLS 1.2 ciphersuite in the ciphersuite field. 
                        The evaluator shall observe that the TSF completes the TLS 1.2 handshake successfully.
                        <h:p/>
                        <h:b>Note:</h:b> Supported ciphersuites using RSA key exchange should not be included in this test. 
                        The supported groups extension sent by the test TLS client should be consistent with the TLS 1.2 ciphersuite (e.g., it should be an EC group if the ciphersuite is ECDHE).
                        <h:p/></test>
                      <test>(TLS 1.3 support) [conditional] If the TSF supports TLS 1.3, then for each supported TLS 1.3 ciphersuite and key exchange group, 
                        the evaluator shall send a compliant TLS 1.3 client hello indicating a list of one or more TLS 1.2 ciphersuites followed by the specific TLS 1.3 ciphersuite and no other ciphersuites in the ciphersuites field, 
                        a supported version extension indicating TLS 1.3 (value '03 04') only, 
                        a supported groups extension indicating the selected group, and a key share extension containing a value representing an element of the specific group. 
                        The evaluator shall observe the TSF’s server hello contains the supported versions extension indicating TLS 1.3, the specific ciphersuite in the selected ciphersuite field, 
                        and a key share extension containing an element of the specific supported group. The evaluator shall observe that the TSF completes the TLS 1.3 handshake successfully.<h:p/></test>
                    </testlist>
                    <h:b>Note:</h:b> The connections in Test 1 may be established as part of the establishment of a higher-level protocol, e.g., as part of an EAP session.
                    <h:p/>
                    It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; 
                    it is not necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).
                    <h:p/>
                    It is not necessary to pair every supported ciphersuite with every supported group. 
                    It is sufficient to use a set of ciphersuite and supported group pairs such that each ciphersuite and each supported group are included in this set.
                    <h:p/>
                    TLS 1.3 includes the supported_groups extension in the encrypted_extensions message. 
                    This message may be observed at the test client after it is decrypted to help verify the key_share is actually a member of the supported group requested.
                    <h:p/>
                  </test>
                  
                  <!-- Test 2 and subtests -->
                  <test>(obsolete versions) The evaluator shall perform the following tests:
                    <testlist>
                      <test>For each of SSL version 2, SSL version 3, TLS version 1.0, and TLS version 1.1, 
                        the evaluator shall send a client hello to the TSF indicating the selected version as the highest version. The evaluator shall observe the TSF terminates the connection. 
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., protocol version, insufficient security) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                      <h:p/></test>
                      <test>The evaluator shall follow the operational guidance to configure the TSF to ensure any supported beta TLS 1.3 versions are disabled, as necessary. 
                        The evaluator shall send the TSF a client hello message indicating the supported version (referred to as the legacy version for TLS 1.3) 
                        with the value '03 04' and observe that the TSF responds with a server hello indicating the highest version supported.
                        <h:p/>
                        <h:b>Note:</h:b> Test 2.2 is intended to test the TSF response to non-standard versions, including beta versions of TLS 1.3. 
                        If the TSF supports such beta versions, the evaluator shall follow the operational guidance instructions to disable them prior to conducting Test 2.2.
                        <h:p/>
                        Some TLS 1.3 implementations ignore the legacy version field and only check for the supported_versions extension to determine TLS 1.3 support by a client. 
                        It is preferred that the legacy version field should still be set to a standard version ('03 03') in the server hello, 
                        but it is acceptable that presence of the supported_versions indicating TLS 1.3 (value '03 04') overrides the legacy_version indication to determine highest supported version.
                        <h:p/></test>
                    </testlist>
          
                    <h:p/></test>
                  
                  <!-- Test 3 and subtests -->
                  <test>(ciphersuites)  The evaluator shall perform the following tests on handling unexpected ciphersuites using a test TLS client 
                    sending handshake messages compliant with the negotiated version except as indicated in the test: 
                    <testlist>
                      <test>(ciphersuite not supported) For each supported version, the evaluator shall follow the operational guidance, 
                        if available, to configure the TSF to disable a supported ciphersuite. 
                        The evaluator shall send a compliant client hello to the TSF indicating support for the specific version and a ciphersuites field containing this single disabled ciphersuite. 
                        The evaluator shall observe that the TOE rejects the connection.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                        <h:p/>
                        If the TSF’s ciphersuites are not configurable, it is acceptable to use a named ciphersuite from the IANA TLS protocols associated with the tested version. 
                        Additional special cases of this test for special ciphersuites are performed separately.
                      <h:p/></test>
                      <test>(version confusion) For each supported version, the evaluator shall send a client hello that is compliant for the specific version
                        that includes a list of ciphersuites consisting of a single ciphersuite not associated with that version. The evaluator shall observe that the TOE rejects the connection.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                        <h:p/>
                        It is preferred that Test 3.2 use TLS 1.3 ciphersuites for a server negotiating TLS 1.2. 
                        If TLS 1.3 is supported, Test 3.2 also includes a server negotiating TLS 1.3 with a TLS 1.2 ciphersuite – 
                        in this case, the negotiated ciphersuite should be chosen to be one supported by the TOE if negotiating TLS 1.2. 
                        If the TOE is configurable to allow both TLS 1.2 and TLS 1.3 clients (or does so by default), 
                        this configuration is used for both the TLS 1.2 and TLS 1.3 iteration of this test; otherwise the TOE is configured to support the negotiated version in each iteration.
                      <h:p/></test>
                      <test>(null ciphersuite) For each supported version, the evaluator shall send a client hello indicating support for the version and include a ciphersuite list consisting of 
                        only the null ciphersuite (TLS_NULL_WITH_NULL_NULL, with the value '00 00') and observe that the TOE rejects the connection.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                      <h:p/></test>
                      <test>(anon ciphersuite) The evaluator shall send the TSF a TLS 1.2 handshake that is compliant, 
                        except that the ciphersuites field includes a ciphersuite list consisting only of ciphersuites using the anonymous server authentication method 
                        and observe that the TOE rejects the connection.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  
                        <h:p/>
                        See IANA TLS parameters for available ciphersuites to be included in the client hello. 
                        The test ciphersuites list should include ciphersuites using supported cryptographic algorithms in as many of the other components as possible. 
                        For example, if the TSF supports the ciphersuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the evaluator should include TLS_DH_ANON_WITH_AES_256_GCM_SHA_384.
                      <h:p/></test>
                      <test>(deprecated encryption algorithm) The evaluator shall send the TSF a TLS 1.2 client hello that is compliant, 
                        except that the ciphersuites field is a list consisting only of ciphersuites indicating a deprecated encryption algorithm, 
                        including at least one each of NULL, RC2, RC4, DES, IDEA, and TDES. The evaluator shall observe that the TOE rejects the connection.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  
                        <h:p/>
                        See IANA TLS parameters for available ciphersuites to be included. 
                        The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. 
                        For example, if the TSF supports TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test could include
                        TLS_ECDHE_PSK_WITH_NULL_SHA_384, TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 TLS_ECDHE_RSA_WITH_RC4_128_SHA, 
                        TLS_DHE_DSS_WITH_DES_CBC_SHA, TLS_RSA_WITH_IDEA_CBC_SHA, and TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA.  
                      <h:p/></test>
                    </testlist>
                    <h:p/></test>
                  
                  <!-- Test 4 and subtests -->
                  <test>(extensions)
                    <testlist>
                      <test>
                        (signature algorithms) [conditional] If the TSF supports certificate-based authentication, 
                        then for each supported signature algorithm indicated in the ST, the evaluator shall perform the following sub-tests with certificates that represent the TOE. 
                        For each sub-test, the evaluator shall establish a to-be-signed certificate representing the TOE using a public-private key pair suitable for the specific signature algorithm value, 
                        and request that the certificate from a certification authority that uses the same signature algorithm, in accordance with <no-link>FIA_X509_EXT.3</no-link>.
                       <h:p/><comment>the reference to FIA_X509_EXT.3 implies that any PP or module that uses this package must have the ability to generate its own 
                        CSRs (either as part of the TOE or its underlying platform), unsure if this is intended or if it will be permissible to load a cert issued by a CA.</comment>  
                        <h:p/>
                        If the TSF also supports the signature_algorithms_cert extension, then for each value of the signature_algorithms_cert extension, the evaluator shall repeat the sub-tests 
                        using a to-be-signed certificate using a key pair consistent with the signature algorithm, 
                        with a certificate obtained from a certification authority that signs certificates using the specific value of the signature_algorithms_cert extension. 
                        <h:p/>
                        <h:b>Note:</h:b> The TSF supports certificate-based server authentication if the TLS 1.2 supported ciphersuites include ciphersuites other than 
                        TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442, TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487, 
                        TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442, and TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487. 
                        If these are the only supported ciphersuites, this test is omitted. For TLS 1.3, certificate-based server authentication, the client hello should not include the PSK extension.
                        <h:p/>
                        The evaluator shall follow operational guidance instructions to provision the TSF with one or more of these certificates as indicated in the following sub-tests: 
                        <testlist>
                          <test>(TLS 1.2) For each supported value of the signature_algorithm extension, the evaluator shall provision a certificate with a key pair compatible with the specific signature_algorithm value and 
                            send the TSF a TLS 1.2 client hello that indicates all supported ciphersuites and has a signature_algorithm extension consisting of a single value matching the specific signature algorithm.
                            <h:p/>
                            If the TSF supports signature_algorithms_cert extension, the client hello also contains the value consistent with the previsioned certificate.
                            <h:p/>
                            The evaluator shall observe that the TSF negotiates TLS 1.2 with
                            a TLS 1.2 ciphersuite that is compatible with the signature algorithm, and that it sends a certificate message containing the provisioned certificate with a key pair that is consistent 
                            with the specific signature_algorithm value (and signed using the signature_algorithms_cert extension value, if supported). 
                            <h:p/>
                            <h:b>Note:</h:b> For TLS 1.2, the ciphersuite describes the signature algorithm as RSA or ECDSA 
                            and is compatible with the certificate used if the signature algorithm component of the ciphersuite is of the same type as the signature value of the signature_algorithm extension. 
                            <h:p/></test>
                          <test>[conditional] If the TSF supports TLS 1.3, then for each supported value of the signature_algorithm, 
                            the evaluator shall provision a certificate with a key pair that is compatible with the specific signature_algorithm value, 
                            send a TLS 1.3 client hello that indicates a supported ciphersuite and has a signature_algorithm extension consisting of a single value matching the specific signature algorithm. 
                            <h:p/>
                            If the TSF supports the signature_algorithms_cert extension, the client hello also contains a signature_algorithms_cert extension with a value consistent with the provisioned certificate.
                            <h:p/>
                            The evaluator shall observe that the TSF sends a certificate message containing the provisioned certificate consistent with the 
                            specific signature_algorithm value (and signed using the signature_algorithms_cert extension value) and a certificate verify message using the signature_algorithm extension value.
                            <h:p/>
                            <h:b>Note:</h:b> For TLS 1.3, the certificate message and certificate verify is encrypted. The evaluator confirms the values of these messages as received at the test TLS client, using logs, or using a test TLS client designed to expose the certificates after they are decrypted. 
                            <h:p/>
                            It is not necessary to manually verify the signature used in the key exchange message (TLS 1.2) or certificate verify message (TLS 1.3). 
                            <h:p/></test>
                          <test>
                            [conditional] If the ST indicates that the TSF supports provisioning of multiple certificates, 
                            the evaluator shall repeat Test 4.1.1 with both the provisioned certificate indicated for Test 4.1.1 (and 4.1.2 if TLS 1.3 is supported)
                            and a certificate that does not match the signature_algorithm value. 
                            The evaluator shall observe that the certificate message (for TLS 1.2) does not include the certificate that does not match the signature_algorithm value 
                            (and signature_algorithms_cert value if supported) in the client hello.<h:p/>
                            <comment>[JF] Per SME, this test has issues with TLS 1.3 and will need updates</comment>
                            <h:p/>  
                          </test>
                          <test>(TLS 1.2) The evaluator shall provision a certificate as in Test 4.1.1 
                            but shall send a client hello that only offers ciphersuites whose signature component does not match the value of the signature_algorithm extension. The evaluator shall observe that the TSF terminates the handshake.
                            <h:p/>
                            <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, illegal parameter) in response to this, 
                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                            <h:p/></test>
                        </testlist>
                      <h:p/></test>
                      <test>(extended master secret): The evaluator shall initiate a TLS 1.2 session with the TSF from a test TLS client for which the client hello does not include the extended master secret extension
                        and observe that the TSF terminates the session.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake error) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
                      <h:p/></test>
                    </testlist>
                  </test>
                  
                  <!-- Test 5 and subtests -->
                  <test>
                    (key exchange) The evaluator shall perform the following tests to confirm compliant key exchange:
                    <testlist>
                      <test>(TLS 1.2 RSA key exchange) [conditional] If any of the supported TLS 1.2 ciphersuites in the ST includes RSA for the key exchange method, the evaluator shall perform the following sub-tests:
                        <testlist>
                          <test>For each supported RSA key size, the evaluator shall provision the TSF with a valid certificate that has an RSA public key of that size. 
                            The evaluator shall initiate a valid TLS 1.2 handshake from a compliant test TLS 1.2 client and observe that the server certificate message matches the provisioned certificate.  <h:p/></test>
                          <test>For each supported RSA key size, the evaluator shall send the TSF a compliant TLS 1.2 client hello, 
                            but in place of the client’s key exchange message, the evaluator shall send the TSF a (non-compliant) Key Exchange message that is properly formatted but uses an invalid EncryptedPreMasterSecret 
                            field in the TLS handshake (e.g., modify a byte of a properly computed value). 
                            The evaluator shall attempt to complete the handshake using compliant client change cipher spec and finished messages and verify that the TSF terminates the handshake in a manner that is indistinguishable 
                            from a finished message error and does not send application data.
                            <h:p/>
                            <h:b>Note:</h:b> Mitigations for oracle attacks described in RFC 5246 Appendix D require the TSF to exhibit the same behavior for key exchange failures as it does for finished message failures. 
                            It is preferred that the TSF send a fatal decrypt failure error alert at the end of the handshake in both this case and for a finished message error,  
                            but it is acceptable that the TSF terminate the session with another error alert, or without sending an error alert in either case. 
                            If the failure error alert is not for a decryption failure, the evaluator shall note that the TSF’s response agrees with the response observed in the TLS 1.2 iteration of Test 5.2. 
                            <h:p/></test>
                        </testlist>
                        <h:p/></test>
                      <test>For each supported version, the evaluator shall initiate a compliant handshake up through the (implied for TLS 1.3) change cipher spec message. 
                        The evaluator shall then send a (non-compliant) client finished handshake message with an invalid ‘verify data’ value and 
                        verify that the server terminates the session and does not send any application data.
                        <h:p/>
                        <h:b>Note:</h:b> TLS 1.2 handshakes include explicit change cipher spec messages, 
                        but TLS 1.3 omits the change cipher spec message. If TLS 1.3 is supported, the modified finished message is sent as the final message from the client 
                        after receiving the server’s second flight of handshake messages {encrypted extensions, (new ticket), (certificate, certificate verify), (certificate request)}.
                        <h:p/>
                        It is preferred that the TSF send a fatal decryption failure error alert, but it is acceptable that the TSF terminate the session using another error alert or without sending an error alert.
                        <h:p/>
                        The finished message is encrypted. The invalid ‘verify data’ can be constructed by modifying a byte of a compliant finished message payload.
                      <h:p/></test>
                      <test>(TLS 1.2 DHE or ECDHE key exchange) [conditional] If the ST indicates support for DHE or ECDHE ciphersuites for TLS 1.2, then the evaluator shall perform the following sub-tests:
                        <testlist>
                          <test>[conditional] If the TSF supports DHE ciphersuites and supports DHE parameters that are not specified in the supported groups extension, 
                            then for each supported DHE parameter set, the evaluator shall follow the operational guidance to configure the TSF to use the DHE parameters in its key exchange. 
                            The evaluator shall then initiate a TLS 1.2 handshake from a test client with a client hello indicating a single DHE ciphersuite. 
                            The evaluator shall observe that the TSF key exchange message indicates the configured parameters and ensure that the client key exchange is a valid point for the parameter set. 
                            The evaluator shall confirm that the TSF successfully completes the session. 
                            <h:p/>
                            The evaluator shall close the session and resend the client hello. 
                            After the TSF responds with a valid key exchange message, the evaluator shall send an empty client key exchange message and observe that the TSF terminates the session.
                            <h:p/>
                            <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption failure, illegal parameter, handshake error) in response to this, 
                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                          <h:p/></test>
                          <test>
                            [conditional] If the TSF supports DHE ciphersuites and supports DHE groups in the supported groups extension, 
                            then for each supported DHE group, the evaluator shall send the TSF a compliant TLS 1.2 client hello indicating a single ciphersuite that is
                            compatible with the group and indicating the group in the supported groups extension. 
                            The evaluator shall observe that the TSF negotiates TLS 1.2 using the indicated ciphersuite and that the server key exchange message indicates the specific group. 
                            The evaluator shall send the TOE a client key exchange with a valid point in the group and observe that the TSF successfully completes the session.
                            <h:p/>
                            The evaluator shall close the session and resend the client hello. After the TSF responds with a valid key exchange message, 
                            the evaluator shall send the TSF a client key exchange with the public key value '0.' The evaluator shall observe that the TSF terminates the session.
                            <h:p/>
                            The evaluator shall send a new client hello including the same ciphersuite but indicating a group not supported by the TSF in the supported groups extension. 
                            The evaluator shall observe that the TSF terminates the session.
                            <h:p/>
                            <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption failure, illegal parameter, handshake error) in response to this, 
                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                          <h:p/></test>
                          <test>[conditional] If the TSF supports ECDHE ciphersuites (and therefore supports ECDHE groups in the supported groups extension), 
                            the evaluator shall send a client hello message indicating a single supported ECDHE ciphersuite and including the supported ECDHE group in the supported groups extension. 
                            The evaluator shall observe that the TSF sends a key exchange message with a valid point of the specified group. 
                            The evaluator shall send the TSF a client key exchange message to the TSF consisting of a valid element in the supported group and observe that the TSF successfully completes the session.
                            <h:p/>
                            The evaluator shall close the session and resend the client hello. After the TSF sends the valid key exchange message, 
                            the evaluator shall send a client key exchange message consisting of an invalid element of the supported group and observe that the TSF terminates the handshake.
                            <h:p/>
                            The evaluator shall send a third client hello to the TSF indicating the supported ECDHE ciphersuite and including an ECDHE group that is not supported. The evaluator shall observe that the TSF terminates the session. 
                            <h:p/>
                            <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption failure, illegal parameter, handshake error, insufficient security) in response to this, 
                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  
                            <h:p/>
                            An invalid ECDSA point consists of properly formatted x and y components, but for which the equation of the curve is not satisfied. To obtain an invalid point, the evaluator can modify a byte of the y coordinate value of a valid point and confirm that the point is not on the curve. 
                            <h:p/>
                            The IANA TLS parameters website lists registered ECDHE groups for use in selecting a non-supported group. If the TSF supports all registered ECDHE groups, it is acceptable to send the client hello without a supported groups extension. The TSF should reject such a client hello, but it is acceptable for the TSF to default to a supported group. In this case, the TSF passes the test.
                            <h:p/></test>
                        </testlist>
                      <h:p/></test>
                      <test>(TLS 1.3 key exchange) [conditional] If the TSF supports TLS 1.3, then for each supported group the evaluator shall perform the following sub-tests: 
                        <testlist>
                          <test>The evaluator shall send the TSF a compliant TLS 1.3 client hello indicating a single key share value from the supported group and shall observe that the server hello 
                            includes valid elements of the supported group. <h:p/></test>
                          <test>The evaluator shall send the TSF a TLS 1.3 client hello indicating a supported groups value supported by the TSF 
                            but containing a key share extension indicating an element claiming to be in the supported group that does not represent a valid element of the group. The evaluator shall observe that the TSF terminates the session.
                            <h:p/>
                            <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter, handshake failure, decryption failure) in response to this, 
                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                            <h:p/>
                            For DHE groups, the invalid element may be of the wrong length; 
                            for ECDHE groups, the invalid element has coordinates (x and y) that do not satisfy the equation of the elliptic curve. 
                            To obtain an invalid ECDHE point, the evaluator can modify a byte of the y coordinate value of a valid point and confirm that the point is not on the curve.
                            <h:p/></test>
                        </testlist>
                        <h:p/></test>
                      <test>For each supported version, the evaluator shall initiate a TLS handshake from a test TLS client with compliant handshake messages negotiating the version and supported parameters 
                        to include the change cipher spec message (implied for TLS 1.3), but which omits the finished message and instead 
                        sends an application message containing random data. The evaluator shall observe that the TSF terminates the connection.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption failure) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                        <h:p/>
                        Application data is indicated by the TLSCipherText ContentType field having value 23 (application data). 
                        The legacy record version '03 03' and length fields should match a valid TLSCipherText message of the same size.
                        <h:p/></test>
                    </testlist>
                  <h:p/></test>
                </testlist>
	      </Tests>
            </aactivity>
          </f-element>
        
	  <audit-event type="optional">
		<audit-event-descr>Failure to establish a TLS session</audit-event-descr>
		<audit-event-info>Reason for failure</audit-event-info>
	 </audit-event>
        </f-component>

       <f-component cc-id="fcs_tlss_ext.2" name="TLS Server Support for Mutual Authentication" status="sel-based">
         <depends on-sel="tlss_mutual_auth"/>
          <f-element>
            <title>The TSF shall support authentication of TLS clients using X.509v3 certificates during the TLS handshake and <selectables>
              <selectable>during post-handshake requests</selectable>
              <selectable>at no other time</selectable></selectables> 
              using the certificate types indicated in the client’s signature_algorithms and <selectables>
                <selectable>signature_algorithms_cert</selectable>
                <selectable>no other</selectable></selectables> extension.
            </title>
            <note role="application">
              TLS 1.3 supports authentication after completing the abbreviated handshake with pre-shared keys. 
              A server may send a client a certificate request after the finished message whenever the client includes the post-handshake authentication extension. 
              The ST author claims ‘during post-handshake request’ if this feature is supported. 
              If TLS 1.3 is not supported, or if the TLS post-handshake request extension is not recognized in a TLS 1.3 handshake, the ST author selects ‘at no other time’.
            </note>
          </f-element>
         <f-element>
           <title>The TSF shall support authentication of TLS clients using X.509v3 certificates in accordance with <no-link>FIA_X509_EXT.1</no-link>.</title>
         </f-element>
         <f-element>
             <title>
             The TSF shall be able to reject the establishment of a trusted channel if the requested client certificate is invalid and <selectables linebreak="yes">
               <selectable>continue establishment of a server-only authenticated TLS channel in accordance with FCS_TLSS_EXT.1 in support of <selectables>
                 <selectable>all applications</selectable>
                 <selectable><assignable>list of calling applications that accept both authenticated and unauthenticated client sessions</assignable></selectable></selectables> 
                 when an empty certificate message is provided by the client
               </selectable>
               <selectable>continue establishment of a mutually authenticated TLS channel when revocation status information for the <selectables>
                 <selectable>client's leaf certificate</selectable>
                 <selectable><assignable>specific intermediate leaf CA certificates</assignable></selectable>
                 <selectable>any non-trust store certificate in the certificate chain</selectable></selectables>  
                 is not available in support of <selectables>
                   <selectable>all applications</selectable>
                   <selectable><assignable>list of calling applications configurable to perform certificate status information bypass processing</assignable></selectable>
                 </selectables> as <selectables>
                   <selectable>configured by an administrator</selectable>
                   <selectable>confirmed by the application user</selectable>
                   <selectable>as a default for <assignable>subset of applications</assignable></selectable></selectables>
               </selectable>
               <selectable>no other processing options for missing or invalid client certificates</selectable></selectables>. 
           </title>
           <note role="application">
             The ST author claims any certificate processing exceptions that are allowed for specific calling applications. 
             The ‘continue establishment of a server-only authenticated TLS channel…’ selection is claimed if the TLS product supports applications that can 
             provide services to unauthenticated users if the user does not possess an appropriate certificate. 
             Within this selection, the ST author indicates which applications are able to support both authenticated and unauthenticated users.
             <h:p/>
             The ST author claims ‘continue establishment of a mutually authenticated TLS channel…’ if there is an administrator configuration or 
             user confirmation that revocation status information is not available for one or more of the certificates in the client’s certificate chain. 
             If claimed, the ST author will describe in the assignment for intermediate values which CA certificates are included in the exception 
             (for example, “all intermediates but the issuing CA” or “specific end-entity certificates as configured”). 
             Within this selection, the ST author specifies which applications are impacted and which authorized user is allowed to approve continuing with the session 
             when revocation information is not available. 
             If an administrator configures whether a user may accept a certificate without status information, both selections are claimed. 
             The ‘as a default’ should only be selected for applications that do not have access to revocation information. 
             Methods for obtaining revocation information are included in <no-link>FIA_X509_EXT.1</no-link>.
           </note>
         </f-element>
         <f-element>
           <title>The TSF shall be able to <selectables linebreak="yes">
             <selectable>not establish a TLS session if an entry of the Distinguished Name or a <selectables>
               <selectable>rfc822_name</selectable>
               <selectable>dns_name</selectable>
               <selectable><assignable>supported name types</assignable></selectable></selectables>
               in the Subject Alternate Name extension contained in the client certificate does not match one of the expected identifiers for the client in accordance with <selectables>
                 <selectable>RFC 2822</selectable>
                 <selectable>RFC 6125</selectable>
                 <selectable>RFC 5280</selectable>
                 <selectable><assignable>RFC for the supported name type</assignable></selectable></selectables>
               matching rules
             </selectable>
             <selectable>pass the <selectables>
               <selectable>validated certificate</selectable>
               <selectable>RFC 822 name normalized according to RFC 822</selectable>
               <selectable>DNS name normalized according to RFC 6125</selectable>
               <selectable><assignable>list of RFC 5280 name types and normalization rules</assignable></selectable>
               <selectable><assignable>list of 'other' name types and standard normalization rules</assignable></selectable>
             </selectables> to <assignable>list of calling applications capable of making access decisions</assignable>
             </selectable></selectables>. 
           </title>
           <note role="application">
             Authorization for services provided by the applications that are protected by the TLS session is determined either by the application establishing a set of reference identifiers 
             or by passing the received identifiers to the application. 
             The ST author indicates the methods supported and, for each method supported, indicates all name types supported; at least one name type is required. 
             In the assignment of the first option, the ST author indicates all name types and the corresponding method for matching in the sub-selections. 
             In the second method option, the ST author indicates which name type normalizations the product supports. 
             If the product passes the entire validated certificate to the application, no normalization of the names contained in the certificate is expected. 
             <h:p/>
             If name normalization is claimed, care should be taken regarding wildcards and IP addresses. 
             IP addresses embedded in DNS host names and in Directory Name CN components have been observed to include non-standard wildcard designations including the ‘*’ character. 
             Any embedded IP addresses should use standard CIDR notation and should not include nonstandard encoding. 
             <h:p/>
             This SFR is claimed if "mutual authentication" is selected in FCS_TLSS_EXT.1.1.
           </note>

	    <aactivity>
	      <TSS>The evaluator shall ensure that the TSS description required per <no-link>FIA_X509_EXT.2.1</no-link> includes the use of client-side certificates for TLS mutual authentication, 
	        and that the description includes any certificate validation exception rules and the name types supported for matching to reference identifiers for all applications that use TLS. 
	        The evaluator shall examine the TSS to ensure that any CN-embedded name types that are used include a description of the encoding and matching rules. <h:p/></TSS>
	      <Guidance>The evaluator shall verify that the operational guidance  includes instructions for configuring trust stores for client-side certificates used in TLS mutual authentication. 
	        The evaluator shall ensure that the operational guidance includes instructions for configuring the server to require mutual authentication of clients using these certificates and for configuring any certificate validation exception rules. 
	        The evaluator shall ensure that the operational guidance includes instructions for configuring reference identifiers normalized or matched by the TSF and matching rules for the supported name types.<h:p/></Guidance>
	      <Tests>
	        The evaluator shall use TLS as a function to verify that the validation rules in <no-link>FIA_X509_EXT.1</no-link> are adhered to and shall perform the tests listed below. 
	        The evaluator shall apply the operational guidance to configure the server to require TLS mutual authentication of clients for these tests unless overridden by instructions in the test activity.
	        <h:p/>
	        <h:b>Note:</h:b> TLS 1.3 is a fundamentally different protocol than TLS 1.2, 
	        so even though the certificate validation and name checking tests are identical for both versions, 
	        it is likely that early deployments of TLS 1.3 may use a different code-base that warrants independent testing. 
	        If TLS 1.3 is supported and the evaluator can verify that the TSF uses the same code-base for certificate validation and name checking for both TLS 1.3 and TLS 1.2, 
	        it is acceptable that testing be performed for only one version for these tests.
	        <testlist>
	          <test>
	            For each supported version, the evaluator shall follow the operational guidance to configure the TOE to require valid client authentication with no exceptions and initiate a TLS session from a compliant TLS test client 
	            supporting that version. The evaluator shall ensure that the test client sends a certificate_list structure which has a length of zero. The evaluator shall verify the TSF terminates the session and no application data flows. 
	            <h:p/>
	            <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, bad certificaate, unknown certificate, unknown CA) in response to this, 
	            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
	            <h:p/></test>
	          <test>[conditional] If the ST indicates that the TSF supports establishment of a TLS session for missing or invalid certificates, then for each supported version, 
	            and for each supported response option for a missing or invalid certificate indicated in FCS_TLSS_EXT.2.3, the evaluator shall configure the TSF according to the operational guidance 
	            to respond as indicated for the calling application. The evaluator shall send client handshake messages from a test TLS client as indicated for each sub-test. The evaluator shall perform the following sub-tests:
	            <testlist>
	              <test>[conditional]: If the TSF supports non-authenticated session establishment when receiving an empty certificate message, 
	                the evaluator shall initiate a TLS handshake from a compliant test TLS client supporting the version and providing a certificate message 
	                containing a certificate_list structure of length zero. The evaluator shall confirm that the TSF notifies the calling application that the user is unauthenticated.
	                <h:p/>
	                <h:b>Note:</h:b> Specific procedures for determining that the calling application is notified will vary based on the application. 
	                If an API to the calling application is not available, the evaluator may attempt to configure the calling application to provide a different response 
	                (e.g., require authentication for flagged data) for authenticated and non-authenticated users and make a request at the test client that results in a response 
	                indicating the application is treating the client as non-authenticated.
	                <h:p/></test>
	              <test>[conditional] If the TSF supports exceptions for when revocation status information is unavailable, 
	                then the evaluator shall follow the operational guidance to attempt to establish a narrowly defined exception for which both exempt and non-exempt certificates can be established. 
	                The evaluator shall establish a primary certificate chain for the test client that only exhibits the allowed exception 
	                and one or more alternate certificate chains for the test client that do not pass the exception rule, as necessary to test the boundaries of the exception rules. 
	                <h:p/>
	                The evaluator shall follow the operational guidance to remove any cached revocation status information for the test client’s primary certificate chain. 
	                The evaluator shall initiate a valid TLS session from the test client that presents the primary certificate for the test client, 
	                provide any feedback requested by the TSF to confirm the exception, and observe that the TSF allows the certificate and completes the TLS handshake successfully. 
	                <h:p/>
	                For each alternate certificate chain, the evaluator shall repeat the session initiation from the test client but present the alternate certificate chain and observe that the TSF terminates the session.
	                <h:p/>
	                <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, unknown certificate, access denied, handshake error) in response to this, 
	                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
	                <h:p/>
	                The alternate certificate chains are intended to test the boundaries of the exception rules. 
	                For example, if the exception rule indicates that only leaf certificates are exempt, the evaluator will include an alternate certificate chain for which a CA certificate’s revocation information is advertised but is not available; 
	                if the exception can be configured for an explicit leaf certificate, or particular subjects, an alternate chain will be included that does not include an excepted certificate or subject. 
	                If the exception rules can be configured for all certificates having advertised revocation information, an alternate certificate chain can include an expired certificate – only one additional validity failure 
	                (e.g., expired certificate) is required in this case. More comprehensive validity failure handling is addressed by testing for <no-link>FIA_X509_EXT.1</no-link>.
	                <h:p/></test>
	            </testlist>
	            <h:p/></test>
	          <test>For each supported version, the evaluator shall configure the TSF to negotiate the version and require client authentication and perform the following steps: <h:ul>
	            <h:li>For each supported name matching method indicated in the outer selection of FCS_TLSS_EXT.2.4, and for each name type supported by the matching method as indicated in the inner-selections claimed in each outer selection,
	              the evaluator shall establish a valid primary certificate chain with single names for a test client containing only the supported name types 
	              and a valid alternate certificate chain with single names indicating a different name of the same type. </h:li>
	            <h:li>[conditional] If any of the supported name types include CN encoding of a name type also supported as a SAN entry, the evaluator shall establish additional certificate chains as follows:
	              <comment>[JF] This was updated based on SME feedback but unsure if further updates are needed</comment><h:p/> 
	              <h:ul>
	                <h:li>The evaluator shall establish a primary certificate chain with multiple names, to include a leaf certificate with: <h:ul>
	                  <h:li>a SAN entry that matches the name in the primary certificate chain with single names, of the same SAN name type; and</h:li>
	                  <h:li>a CN entry encoding the same SAN type which matches the name in the alternate certificate chain with single names of the CN encoding of the same SAN name type.</h:li>
	                </h:ul></h:li>
	                <h:li>The evaluator shall establish an alternate certificate chain with multiple names, to include a leaf certificate with:<h:ul>
	                  <h:li>a SAN entry that matches the name in the alternate certificate chain with single names, of the same SAN name type; and </h:li>
	                  <h:li>a CN entry encoding the same SAN type which matches the name in the primary certificate chain with single names, of the CN encoding of the same SAN name type.</h:li>
	                </h:ul>
	                </h:li></h:ul>
	              In this case, the evaluator shall also obtain an alternate certificate chain with multiple names including a CN encoding of the name matching that in the corresponding primary certificate containing 
	              only the CN encoding and a SAN entry of the same type that matches the name in the alternate certificate chain having the same SAN type. </h:li>
	            <h:li>[conditional] If any of the supported name types include CN encoding, the evaluator shall follow the operational guidance to configure the TSF, 
	              establishing trust in the root CA for all primary and alternate certificate chains. 
	              The evaluator shall configure the TSF and any relevant TOE applications that use TLS for client authentication as necessary to establish reference identifiers that match the names in the client’s primary certificate chains 
	              with single names, but not matching any of the names in the alternate certificate chains with single names.</h:li>
	            <h:li>For each primary certificate chain (with single or multiple names), the evaluator shall initiate a TLS session from the test TLS client that is configured to present the primary certificate chain 
	              in a certificate message and a valid certificate verify message in response to the server’s certificate request message. 
	              The evaluator shall confirm that the TSF accepts the certificate and completes the authenticated TLS session successfully.</h:li>
	            <h:li>For each alternate certificate chain (with single or multiple names), the evaluator shall initiate a TLS session from the test TLS client that is configured 
	              to present the alternate certificate chain in a certificate message and a valid certificate verify message in response to the server’s certificate request message. 
	              The evaluator shall confirm that the TSF terminates the session.</h:li>
	          </h:ul>
	            <h:p/>
	            <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., access denied) in response to this, 
	            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
	            <h:p/>
	            The intent of this test is to confirm that for each method that the TSF uses to match name types presented in validated certificates, 
	            it is able to recognize both matching and non-matching names. 
	            Names of special types implicitly encoded in the CN entry of the certificate subject name are especially prone to error since they may only be validated 
	            by the issuing CA as a directory name (RDN) type, especially if the issuing CA is unaware of the intended encoding as a different name type. 
	            It is a best practice that when the CN is interpreted as an embedded name type other than RDN, an explicitly encoded SAN entry should take precedence.
	            
	            <h:p/></test>
	        </testlist>
	      </Tests>
	    </aactivity>
          </f-element>
	  <audit-event/>
        </f-component>
 
        <f-component cc-id="fcs_tlss_ext.3" name="TLS Server Downgrade Protection" status="sel-based">
          <depends on-sel="tlss_downgrade_protection"/>
          <f-element>
            <title>
              The TSF shall set the server hello extension to a random value concatenated with the TLS 1.2 downgrade indicator when negotiating TLS 1.2 as indicated in RFC 8446 section 4.1.3.
            </title>
            <note role="application">
              This SFR is claimed if the TSF supports TLS 1.3. 
              RFC 8446 requires both the TLS 1.2 downgrade indicator as well as an indicator for TLS 1.1 and below. 
              This FP requires the server to reject attempts to establish TLS 1.1 and below, making this mechanism redundant. 
              However, products may still implement both indicators to be compliant with the RFC. 
              <h:p/>
              This SFR is claimed if "supplemental downgrade protection" is selected in FCS_TLSS_EXT.1.1.
	    </note>
	    <aactivity>
        <TSS>
          The evaluator shall examine the ST and confirm that the TLS description includes details on the session downgrade protections that are supported.<h:p/>
	</TSS>
        <Guidance>
          The evaluator shall examine the operational guidance to confirm that instructions are included to configure the TSF to support only TLS 1.3 and to provide the associated downgrade indications.<h:p/>
	</Guidance>
	      <Tests>
	        The evaluator shall follow the operational guidance as necessary to configure the TSF to negotiate only TLS 1.3 and to provide the associated downgrade indications. 
	        The evaluator shall send a TLS client hello to the TOE that indicates support for only TLS 1.2. 
	        The evaluator shall observe that the TSF sends a server hello with the last eight bytes of the server random value equal to 44 4F 57 4E 47 52 44 01.
	      </Tests>
	    </aactivity>
	    </f-element>
	   <audit-event />
	</f-component>

	<f-component cc-id="fcs_tlss_ext.4" name="TLS Server Support for Renegotiation" status="sel-based">
	  <depends on-sel="tlss_impl"/>
          <f-element>
            <title>The TSF shall support secure renegotiation through the use of <selectables>
              <selectable>the "renegotiation_info" TLS extension</selectable>
              <selectable>not allowing session renegotiation</selectable></selectables> in accordance with RFC 5746.
            </title>
          </f-element>
          <f-element>
            <title>The TSF shall, when negotiating a TLS 1.2 session, <selectables>
              <selectable>include the renegotiation_info extension in ServerHello messages when a client hello with the renegotiation_info extension is received 
                and shall terminate a session if neither of the renegotiation_info or TLS_EMPTY_RENEGOTIATION_INFO_SCSV signaling ciphersuites are indicated in the client hello</selectable>
              <selectable>not allow renegotiation</selectable></selectables>.
            </title>
          </f-element>
	  <f-element>
	    <title>
	      The TSF shall terminate the session if an unexpected client hello is received during an active TLS session.
	    </title>
            <note role="application">
              RFC 5746 defines an extension to TLS 1.2 that binds renegotiation handshakes to the cryptography in the original handshake. 
              As a refinement of the RFC, servers that support renegotiation and negotiating TLS 1.2 will terminate a session if neither of the methods described in RFC 5746 are offered by the client. 
              RFC 5746 indicates that a server negotiating TLS 1.2 is required to terminate the session if the conditions for secure renegotiation are not met. 
              Alternatively, a TLS server may negotiate TLS 1.2 without any RFC 5746 client renegotiation indicators 
              if it always terminates an existing session when a new client hello is received, similar to the implementation of TLS 1.3. 
              <h:p/>
              TLS 1.3 does not allow renegotiation. Termination, as indicated in FCS_TLSS_EXT.4.3, covers TLS 1.3 sessions as well as TLS 1.2 sessions where the client hello received does not comply with RFC 5746, 
              or when configured to reject renegotiation (if the product is configurable).
              <h:p/>
              This SFR is claimed if "TLS as a server" is selected in FCS_TLS_EXT.1.1.
	    </note>
	    <aactivity>
	      <TSS>
	        The evaluator shall examine the ST to confirm that the TLS description includes details on session renegotiation protection methods supported, to include when renegotiation is prohibited.<h:p/>
	      </TSS>
	      <Guidance>The evaluator shall examine the operational guidance to confirm that any instructions that are needed to meet the requirements are included. 
	        If support for TLS 1.2 is configurable to use RFC 5746 methods or to deny renegotiation, the evaluator shall ensure that the operational guidance includes instructions for configuring the TSF in this manner.<h:p/></Guidance>
	      <Tests>
	        The evaluator shall perform the following tests, as indicated for each version supported, using a test TLS client able to construct the indicated messages and expose messages received from the TSF:
	        <testlist>
	          <test>(RFC 5746 compliant TLS 1.2 initial handshake) [conditional] 
	            If the TSF supports renegotiation, the evaluator shall follow the operational guidance as necessary to configure the TSF to enforce RFC 5746 methods. 
	            The evaluator shall initiate a TLS 1.2 session from a test TLS client for each of the following sub-tests:
	            <testlist>
	              <test>The evaluator shall send an initial client hello without the renegotiation_info extension and without including the signaling ciphersuite value, TLS_EMPTY_RENEGOTIATION_INFO_SCSV. 
	                The evaluator shall observe that the TSF terminates the session.
	                <h:p/>
	                <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, 
	                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
	                <h:p/></test>
	              <test>
	                The evaluator shall send an initial client hello with the renegotiation_info extension indicating a renegotiated_connection length greater than zero. The evaluator shall observe that the TSF terminates the session. 
	                <h:p/>
	                <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, 
	                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
	                <h:p/></test>
	            </testlist>
	            <h:p/></test>
	          <test>
	            (renegotiation attempt) For each of the following sub-tests, the evaluator shall establish a compliant TLS channel with an initial handshake that uses the indicated secure renegotiation method for the version indicated. 
	            Without closing the session, the evaluator shall send a second client hello within the channel specific to the version as indicated:
	            <testlist>
	              <test>[conditional] If the TSF allows renegotiation, the evaluator shall configure the TSF to support RFC 5746 methods, 
	                send an initial handshake with a valid renegotiation extension, 
	                send a new TLS 1.2 client hello on the TLS 1.2 channel containing the renegotiation_info extension indicating valid client_verify_data, and observe the TSF successfully completes the handshake.<h:p/></test>
	              <test>[conditional] If the TSF allows renegotiation, the evaluator shall send an initial client hello containing a valid renegotiation extension, 
	                 send a new TLS 1.2 client hello on the TLS 1.2 channel with the signaling ciphersuite value, TLS_ EMPTY_RENEGOTIATION_INFO_SCSV, and observe that the TSF terminates the session.
	                <h:p/>
	                <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, 
	                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
	                <h:p/></test>
	              <test>[conditional] If the TSF allows renegotiation, for each TLS 1.2 renegotiation method claimed in accordance with RFC 5746, 
	                the evaluator shall send an initial client hello indicating the method, send a new TLS 1.2 client hello on the TLS 1.2 channel without a renegotiation_info extension, and observe that the TSF terminates the session.
	                <h:p/>
	                <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, 
	                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
	                <h:p/></test>
	              <test>[conditional]: If the TSF allows renegotiation, for each TLS 1.2 renegotiation method claimed in accordance with RFC 5746, 
	                the evaluator shall send an initial client hello indicating the method, 
	                send a new TLS 1.2 client hello on the TLS 1.2 channel with a renegotiation_info extension indicating an invalid client_verify_data value (modify a byte of a valid value), and observe that the TSF terminates the session.
	                <h:p/>
	                <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, 
	                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
	                <h:p/></test>
	              <test>[conditional] If the TSF supports TLS 1.3, or if the TSF rejects renegotiation for TLS 1.2, then for each such version, 
	                the evaluator shall follow the operational guidance as necessary to configure the TSF to negotiate the version and reject renegotiation. 
	                The evaluator shall initiate a valid initial session for the specified version, send a valid client hello on the non-renegotiable TLS channel, and observe that the TSF terminates the session.
	                <h:p/>
	                <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, 
	                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).
	                <h:p/></test>
	            </testlist>
	            <h:p/></test>
	        </testlist>
	      </Tests>
	    </aactivity>
	    </f-element>
	<audit-event/>
	</f-component>
        
        
        <f-component cc-id="fcs_tlss_ext.5" name="TLS Server Support for Session Resumption" status="sel-based">
          <depends on-sel="tlss_resumption"/> 
          <f-element>
            <title>
              The TSF shall support session resumption as a server via the use of <selectables>
                <selectable>session ID in accordance with RFC 5246</selectable>
                <selectable>tickets in accordance with RFC 5077</selectable>
                <selectable id="tlss_v13_resumption">PSK and tickets in accordance with RFC 8446</selectable></selectables>. 
            </title>
            <note role="application">
              The ST author indicates which session resumption mechanisms are supported. 
              One or both of the first two options, "session ID in accordance with RFC 5246" and "tickets in accordance with RFC 5077" are claimed for TLS 1.2 resumption. 
              If resumption of TLS 1.3 sessions is supported, "PSK and tickets in accordance with RFC 8446" is selected, and the selection-based SFR FCS_TLSS_EXT.6 must also be claimed.
              <h:p/>
              While it is possible to perform session resumption using PSK ciphersuites in TLS 1.2, this is uncommon. 
              Validation of key exchange and session negotiation rules for PSK ciphersuites is independent of the source of the pre-shared key and is covered in FCS_TLSS_EXT.1.
              <h:p/>
              This SFR is claimed if "session resumption" is selected in FCS_TLSS_EXT.1.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall examine the ST and confirm that the TLS server protocol description includes a description of the supported resumption mechanisms.
                <h:p/>
              </TSS>
              <Guidance>
                The evaluator shall ensure the operational guidance describes instructions for any configurable features of the resumption mechanism.<h:p/>
              </Guidance>
              <Tests>
                The evaluator shall perform the following tests:
                <testlist>
                  <test>For each supported version, and for each supported resumption method for that version, 
                    the evaluator shall establish a compliant initial TLS session with the TOE for the version using the specified method. 
                    The evaluator shall close the successful session and initiate resumption using the specified mechanism. 
                    The evaluator shall observe that the TSF successfully establishes the resumed session in accordance with the requirements. <h:p/></test>
                  <test>For each supported version and each supported resumption method for the version, 
                    the evaluator shall send a compliant client hello message supporting only the specific version and indicating support for the resumption method. 
                    The evaluator shall allow the TOE and test client to continue with the compliant handshake until resumption information is established but then cause a fatal error to terminate the session. 
                    The evaluator shall then send a new client hello in an attempt to resume the session with the resumption information provided 
                    and verify that the TSF does not resume the session, but instead either terminates the session or completes a full handshake, ignoring the resumption information.
                    <h:p/>
                    <h:b>Note:</h:b> For TLS 1.2, resumption information should be established at the point the TSF sends a server hello, either acknowledging the session-based resumption 
                    or acknowledging support for ticket-based resumption and sending a new_ticket message. 
                    A TLS 1.2 session can then be terminated by sending a modified finished message. 
                    For TLS 1.3, the new_ticket message is sent after the finished message; once received by the client, the session can be terminated by modifying a byte of the encrypted application data. 
                    <h:p/></test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <audit-event/>
        </f-component>
        
        
        <f-component cc-id="fcs_tlss_ext.6" name="TLS Server TLS 1.3 Resumption Refinements" status="sel-based">
          <depends on-sel="tlss_v13_resumption"/> 
          <f-element>
            <title>
              The TSF shall support TLS 1.3 resumption using PSK with psk_key_exchange_mode extension with the value psk_dhe.  
            </title>
          </f-element>
          <f-element>
            <title>
              The TSF shall ignore early data received in TLS 1.3 sessions.
            </title>
            <note role="application">
              This SFR is claimed when session resumption is supported for TLS 1.3. RFC 8446 allows pre-shared keys to be used directly 
              and also allows early data to be protected using only the pre-shared key. This SFR refines the RFC to use PSK only with a supplemental DHE or ECDHE key exchange to ensure perfect forward secrecy for all sessions.
              <h:p/>
              This SFR is claimed if "PSK and tickets in accordance with RFC 8446" is selected in FCS_TLSS_EXT.5.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall examine the ST to confirm that the TLS description includes details on session resumption for TLS 1.3, 
                describes each application capable of using TLS 1.3 with PSK, and describes how the TSF and application respond to client attempts to use early data (including via logging or observable responses). 
                The evaluator shall confirm that the TLS description shows that only the psk_dhe_ke psk_key_exchange_mode is supported and that early information is ignored. 
                <h:p/>
              </TSS>
              <Guidance>
                The evaluator shall examine the operational guidance to verify that instructions for any configurable features that are required to meet the requirement are included. 
                <h:p/>
              </Guidance>
              <Tests>
                The evaluator shall follow the operational guidance to configure the TSF to negotiate TLS 1.3 and shall perform the following tests:
                <testlist>
                  <test>The evaluator shall attempt a resumed session (as for FCS_TLSS_EXT.5 Test 1) but using psk_ke mode as the value for the psk_key_exchange_mode in the resumption client hello. 
                    The evaluator shall observe that the TSF refuses to resume the session, either by completing a full TLS 1.3 handshake or by terminating the session.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). 
                    <h:p/></test>
                  <test>The evaluator shall initiate a resumed session (as for FCS_TLSS_EXT.5 Test 1) with a test TLS 1.3 client attempting to provide early data that provokes a known reaction at the TOE if received. 
                    The evaluator shall observe that the TSF does not react to the early data, indicating that the data was ignored.
                    <h:p/>
                    <h:b>Note:</h:b> The specific early data used may depend on the applications calling the TLS session and should be selected to initiate an observable response in the TSF or calling application as described in the ST. 
                    For HTTPS, for example, the early data can be an HTTP POST that updates data at the TOE, which can then be observed via a user interface for the application if the data was 
                    posted or via application logging indicating that the operation failed.
                    <h:p/></test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>  
          <audit-event/>
        </f-component>

  <f-component cc-id="fcs_dtlsc_ext.1" name="DTLS Client Protocol" status="sel-based">
    <depends on-sel="dtlsc_impl"/>
    <f-element id="fel-dtlsc-impl">
      <title>The product shall implement DTLS 1.2 (RFC 6347) and
      <selectables>
        <selectable>DTLS 1.0 (RFC 4347)</selectable>
        <selectable exclusive="yes">no earlier DTLS versions</selectable>
      </selectables> as a client that supports the ciphersuites
    <selectables linebreak="yes">
      <selectable>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
      <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
      <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
      <selectable>TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
      <selectable id="drsadhe1">TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
      <selectable id="drsadhe2">TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
      <selectable id="drsadhe3">TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
      <selectable id="decdhe1">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
      <selectable id="decdhe2">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
      <selectable id="decdhe3">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
      <selectable id="decdhe4">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
      <selectable id="decdhe5">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
      <selectable id="decdhe6">TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
      <selectable id="decdhe7">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
      <selectable id="decdhe8">TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
      </selectables>
      and also supports functionality for 
      <selectables linebreak="yes">
        <selectable id="dtlsc_mutual_auth">mutual authentication</selectable>
        <selectable exclusive="yes">none</selectable>
      </selectables>.
      </title>
      <note role="application">
      If any ECDHE or DHE ciphersuites are selected, then
      FCS_TLSC_EXT.5 is required.
      <h:br/><h:br/>
      If <h:i>mutual authentication</h:i> is selected, then the ST must additionally include 
      the requirements from FCS_DTLSC_EXT.2.
      If the TOE implements
      mutual authentication, this selection must be made.
      <h:br/><h:br/>
      Differences between DTLS 1.2 and TLS 1.2 are outlined in RFC 6347; otherwise the
      protocols are the same.
      All application notes listed for <xref to="fel-client"/> that are relevant
      to DTLS apply to this requirement.
    </note>
      <aactivity level="element">
	<Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-client"/>,
        but ensuring that DTLS (and not TLS) is used in each evaluation activity.
        <h:br/><h:br/>
        For tests which involve version numbers, note that in DTLS the on-the-wire representation
        is the 1's complement of the corresponding textual DTLS version numbers. This is described in
        Section 4.1 of RFC 6347 and RFC 4347.  For example, DTLS 1.0 is represented by the bytes 0xfe 0xff,
        while the undefined DTLS 1.4 would be represented by the bytes 0xfe 0xfb.
	</Tests>
      </aactivity>
    </f-element>

    <f-element id="fel-dtlsc-match-id">
      <title> The product shall verify that the presented identifier matches the reference
        identifier according to RFC 6125. </title>
        <note role="application">
          All application notes listed for <xref to="fel-present-identifier" /> that are relevant
          to DTLS apply to this requirement.
        </note>
      <aactivity level="element">
      <Tests>
	The evaluator shall perform the evaluation activities listed for
	<xref to="fel-present-identifier"/>.
      </Tests>
      </aactivity>
    </f-element>

    <f-element id="fel-dtlsc-bad-cert">
      <title>The product shall not establish a trusted channel if the
        server certificate is invalid
        <selectables>
        <selectable exclusive="yes">with no exceptions</selectable>
        <selectable>except when override is authorized</selectable>
      </selectables>.
      </title>
      <note role="application">
        All application notes listed for <xref to="fel-server-cert" /> that are relevant
        to DTLS apply to this requirement.
      </note>
      <aactivity>
        <Tests>
          The evaluator shall perform the evaluation activities listed for <xref to="fel-server-cert"/>.
	</Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlsc-fail">
    <title>The product shall
    <selectables onlyone="yes">
      <selectable>terminate the DTLS session</selectable>
      <selectable>silently discard the record</selectable>
    </selectables>
    if a message received contains an invalid MAC or if decryption fails in the case of GCM and other
    AEAD ciphersuites.
    </title>
    <aactivity level="element">
      <TSS>
      The evaluator shall verify that the TSS describes the actions that take place if a message
      received from the DTLS Server fails the MAC integrity check.
      </TSS>
      <Tests>
      The evaluator shall establish a connection using a server. The evaluator will then modify
      at least one byte in a record message, and verify that the client discards the record or
      terminates the DTLS session.
      </Tests>
    </aactivity>
  </f-element>
 	<audit-event type="optional">
		<audit-event-descr>Failure of the certificate validity check</audit-event-descr>
		<audit-event-info>Issuer Name and Subject Name of certificate.</audit-event-info>
	</audit-event> 
  </f-component>

  <f-component cc-id="fcs_dtlsc_ext.2" name="DTLS Client Support for Mutual Authentication" status="sel-based">
    <depends on-sel="dtlsc_mutual_auth"/>
          <f-element id="fel-dtlsc-mut-auth">
            <title>
              The product shall support mutual authentication using X.509v3 certificates.
            </title>
            <note role="application">
              All application notes listed for <xref to="fel-mut-auth-certs" /> that are relevant
              to DTLS apply to this requirement.
      </note>
      <aactivity>
	<Tests>
          The evaluator shall perform the evaluation activities listed for <xref to="fel-mut-auth-certs" />.
	</Tests>
      </aactivity>
    </f-element>
	  <audit-event/>
  </f-component>

  <f-component cc-id="fcs_dtlss_ext.1" name="DTLS Server Protocol" status="sel-based">
    <depends on-sel="dtlss_impl"/>
    <f-element id="fel-dtlss-impl">
      <title>The product shall implement DTLS 1.2 (RFC 6347) and
      <selectables>
        <selectable>DTLS 1.0 (RFC 4347)</selectable>
        <selectable exclusive="yes">no earlier DTLS versions</selectable>
      </selectables>
        as a server that supports the ciphersuites
        <selectables linebreak="yes">
          <selectable>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
          <selectable>TLS_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
          <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
          <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
          <selectable>TLS_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5288</selectable>
          <selectable>TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
          <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
          <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
          <selectable>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5288</selectable>
          <selectable>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
          <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
        </selectables> and no other ciphersuites,
        and also supports functionality for
        <selectables linebreak="yes">
          <selectable id="dtlss_mutual_auth">mutual authentication</selectable>
          <selectable exclusive="yes">none</selectable>
      </selectables>.
      </title>
      <note role="application">
      If <h:i>mutual authentication</h:i> is selected, then the ST must additionally include
      the requirements from FCS_DTLSS_EXT.2.  If the TOE implements
      mutual authentication, this selection must be made.
      <h:br/><h:br/>
      All application notes listed for <xref to="fel-tlss-impl" /> that are relevant
      to DTLS apply to this requirement.
      </note>
      <aactivity level="element">
	<Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-tlss-impl"/>,
        but ensuring that DTLS (and not TLS) is used in each stage of the evaluation activities.
        <h:br/><h:br/>
        For tests which involve version numbers, note that in DTLS the on-the-wire representation
        is the 1's complement of the corresponding textual DTLS version numbers. This is described in
        Section 4.1 of RFC 6347 and RFC 4347.  For example, DTLS 1.0 is represented by the bytes 0xfe 0xff,
        while the undefined DTLS 1.4 would be represented by the bytes 0xfe 0xfb.
	</Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlss-deny-version">
      <title>The product shall deny connections from clients requesting
        <assignable>list of DTLS protocol versions</assignable>.
      </title>
      <note role="application">Any specific DTLS version
        not selected in <xref to="fel-dtlss-impl"/> should be assigned here.
        This version of the FP does not require the server to deny DTLS 1.0, and if the TOE
        supports DTLS 1.0 then "none" can be assigned. In a future version of this FP,
        DTLS 1.0 will be required to be denied.
      </note>
      <aactivity level="element">
        The following evaluation activities shall be conducted unless "none" is assigned.
        <h:br/><h:br/>
        <TSS>
        The evaluator shall verify that the TSS contains a
        description of the denial of old DTLS versions
        consistent relative to selections in <xref to="fel-dtlss-deny-version" />.
	</TSS>
        <Guidance>
        The evaluator shall verify that the operational guidance includes any configuration
        necessary to meet this requirement.
	</Guidance>
        <Tests>
        <testlist>
          <test>
            The evaluator shall send a Client Hello requesting a
            connection with each version of DTLS specified in the selection
            and verify that the server denies the connection.
          <h:p/></test>
        </testlist>
	</Tests>
      </aactivity>
    </f-element>

    <f-element id="fel-dtlss-fail-validation">
      <title>
        The product shall not proceed with a connection handshake attempt if the DTLS Client fails validation.
      </title>
      <note role="application">
        The process to validate the IP address of a DTLS client is specified in section 4.2.1 of RFC 6347 (DTLS 1.2) and
        RFC 4347 (DTLS 1.0). The server validates the DTLS client during Connection Establishment (Handshaking) and prior
        to sending a Server Hello message. After receiving a ClientHello, the DTLS Server sends a
        HelloVerifyRequest along with a cookie. The cookie is a signed message using a keyed hash function. The DTLS
        Client then sends another ClientHello with the cookie attached. If the DTLS
        server successfully verifies the signed cookie, the Client is not using a spoofed IP address.
      </note>
      <aactivity level="element">
        <TSS>
        The evaluator shall verify that the TSS describes how the DTLS Client IP address is validated prior to
        issuing a ServerHello message.
	</TSS>
        <Tests>
        Modify at least one byte in the cookie from the Server's HelloVerifyRequest message, and verify that the
        Server rejects the Client's handshake message.
	</Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlss-rsa-keysize">
      <title>The product shall perform key establishment for DTLS using
        <selectables>
          <selectable>RSA with size
            <selectables>
              <selectable>2048 bits</selectable>
              <selectable>3072 bits</selectable>
              <selectable>4096 bits</selectable>
              <selectable exclusive="yes">no other sizes</selectable>
            </selectables>
          </selectable>
          <selectable>Diffie-Hellman parameters with size
            <selectables>
              <selectable>2048 bits</selectable>
              <selectable>3072 bits</selectable>
              <selectable>4096 bits</selectable>
              <selectable>6144 bits</selectable>
              <selectable>8192 bits</selectable>
              <selectable exclusive="yes">no other size</selectable>
            </selectables>
          </selectable>
          <selectable>Diffie-Hellman groups
            <selectables>
              <selectable>ffdhe2048</selectable>
              <selectable>ffdhe3072</selectable>
              <selectable>ffdhe4096</selectable>
              <selectable>ffdhe6144</selectable>
              <selectable>ffdhe8192</selectable>
              <selectable exclusive="yes">no other groups</selectable>
            </selectables>
          </selectable>
          <selectable>ECDHE parameters using elliptic curves
            <selectables>
              <selectable>secp256r1</selectable>
              <selectable>secp384r1</selectable>
              <selectable>secp521r1</selectable>
            </selectables> and no other curves</selectable>
          <selectable exclusive="yes">no other key establishment methods</selectable>
        </selectables>.
      </title>
      <note role="application">
        If the ST lists an RSA ciphersuite in <xref to="fel-dtlss-impl"/>, the ST must include the
        RSA selection in the requirement.
        <h:br/>
        If the ST lists a DHE ciphersuite in <xref to="fel-dtlss-impl"/>, the ST must include either
        the Diffie-Hellman selection for parameters of a certain size,
        or for particular Diffie-Hellman groups.
        <h:br/>
        If the ST lists an ECDHE ciphersuite in <xref to="fel-dtlss-impl"/>, the ST must include the
        NIST curves selection in the requirement.
      </note>
      <aactivity level="element">
      <Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-rsa-size"/>.
      </Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlss-kill-session">
      <title>The product shall
      <selectables onlyone="yes">
        <selectable>terminate the DTLS session</selectable>
        <selectable>silently discard the record</selectable>
      </selectables>
      if a message received contains an invalid MAC or if decryption fails in the case of GCM and other
      AEAD ciphersuites.
      </title>
      <aactivity level="element">
        <TSS>
        The evaluator shall verify that the TSS describes the actions that take place if a message
        received from the DTLS client fails the MAC integrity check.
	</TSS>
        <Tests>
        The evaluator shall establish a connection using a client. The evaluator will then modify
        at least one byte in a record message, and verify that the server discards the record or
        terminates the DTLS session.
	</Tests>
      </aactivity>
    </f-element>
  	<audit-event type="optional">
		<audit-event-descr>Failure of the certificate validity check</audit-event-descr>
		<audit-event-info>Issuer Name and Subject Name of certificate</audit-event-info>
	</audit-event>
  </f-component>

  <f-component cc-id="fcs_dtlss_ext.2" name="DTLS Server Support for Mutual Authentication" status="sel-based">
    <depends on-sel="dtlss_mutual_auth"/>
          <f-element id="fel-dtlss-mut-auth">
            <title>
              The product shall support mutual authentication of DTLS clients using X.509v3 certificates.
            </title>
            <note role="application">
              All application notes listed for <xref to="fel-auth-client-certs" /> that are relevant
              to DTLS apply to this requirement.
      </note>
      <aactivity level="element">
	<Tests>
          The evaluator shall perform the evaluation activities listed for <xref to="fel-auth-client-certs" />.
	</Tests>
      </aactivity>

    </f-element>
    <f-element id="fel-dtlss-bad-cert">
      <title>The product shall not establish a trusted channel
        if the client certificate is invalid.
      </title>
      <note role="application">
        All application notes listed for <xref to="fel-bad-client-cert" /> that are relevant
        to DTLS apply to this requirement.
      </note>
      <aactivity level="element">
	<Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-bad-client-cert" />. 
	</Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlss-bad-name">
      <title>The product shall not establish a trusted channel if
        the Distinguished Name (DN) or Subject Alternative Name (SAN)
        contained in a certificate does not match one of the expected identifiers
        for the client.
      </title>
      <note role="application">
        All application notes listed for <xref to="fel-tlss-match-name" /> that are relevant
        to DTLS apply to this requirement.
      </note>
      <aactivity level="element">
        <Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-tlss-match-name" />.
	</Tests>
      </aactivity>
      </f-element>
	  <audit-event/>
      </f-component>
      </section>

  </sec:Security_Functional_Requirements>
    <bibliography>
      <cc-entry/>
    </bibliography>
</Package>
